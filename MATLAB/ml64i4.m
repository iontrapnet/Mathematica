function [methodinfo,structs,enuminfo,ThunkLibName]=ml64i4
%ML64I4 Create structures to define interfaces found in 'mathlink.lua'.

%This function was generated by loadlibrary.m parser version  on Mon Sep 26 19:22:23 2016
%perl options:'mathlink.lua.i -outfile=ml64i4.m -thunkfile=ml64i4_thunk_pcwin64.c -header=mathlink.lua.h'
ival={cell(1,0)}; % change 0 to the actual number of functions to preallocate the data.
structs=[];enuminfo=[];fcnNum=1;
fcns=struct('name',ival,'calltype',ival,'LHS',ival,'RHS',ival,'alias',ival,'thunkname', ival);
MfilePath=fileparts(mfilename('fullpath'));
ThunkLibName=fullfile(MfilePath,'ml64i4_thunk_pcwin64');
% extern __MLProcPtr__ MLAllocatorCast ( MLAllocatorProcPtr f ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrThunk';fcns.name{fcnNum}='MLAllocatorCast'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='FcnPtr'; fcns.RHS{fcnNum}={'FcnPtr'};fcnNum=fcnNum+1;
% extern __MLProcPtr__ MLDeallocatorCast ( MLDeallocatorProcPtr f ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrThunk';fcns.name{fcnNum}='MLDeallocatorCast'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='FcnPtr'; fcns.RHS{fcnNum}={'FcnPtr'};fcnNum=fcnNum+1;
% extern devyield_sleep MLSleepYP ( MLYieldParameters yp ); 
fcns.thunkname{fcnNum}='ulongvoidPtrThunk';fcns.name{fcnNum}='MLSleepYP'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'MLYieldParamsPtr'};fcnNum=fcnNum+1;
% extern devyield_count MLCountYP ( MLYieldParameters yp ); 
fcns.thunkname{fcnNum}='longvoidPtrThunk';fcns.name{fcnNum}='MLCountYP'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'MLYieldParamsPtr'};fcnNum=fcnNum+1;
% extern MLYieldFunctionObject MLCreateYieldFunction ( MLEnvironment ep , MLYieldFunctionType yf , void * reserved ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='MLCreateYieldFunction'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='FcnPtr'; fcns.RHS{fcnNum}={'ml_environmentPtr', 'FcnPtr', 'voidPtr'};fcnNum=fcnNum+1;
% extern MLYieldFunctionType MLDestroyYieldFunction ( MLYieldFunctionObject yfo ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrThunk';fcns.name{fcnNum}='MLDestroyYieldFunction'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='FcnPtr'; fcns.RHS{fcnNum}={'FcnPtr'};fcnNum=fcnNum+1;
% extern int MLCallYieldFunction ( MLYieldFunctionObject yfo , MLINK mlp , MLYieldParameters p ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='MLCallYieldFunction'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'FcnPtr', 'MLinkPtr', 'MLYieldParamsPtr'};fcnNum=fcnNum+1;
% extern MLMessageHandlerObject MLCreateMessageHandler ( MLEnvironment ep , MLMessageHandlerType mh , void * reserved ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='MLCreateMessageHandler'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='FcnPtr'; fcns.RHS{fcnNum}={'ml_environmentPtr', 'FcnPtr', 'voidPtr'};fcnNum=fcnNum+1;
% extern MLMessageHandlerType MLDestroyMessageHandler ( MLMessageHandlerObject mho ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrThunk';fcns.name{fcnNum}='MLDestroyMessageHandler'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='FcnPtr'; fcns.RHS{fcnNum}={'FcnPtr'};fcnNum=fcnNum+1;
% extern void MLCallMessageHandler ( MLMessageHandlerObject mho , MLINK mlp , int m , int n ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrint32int32Thunk';fcns.name{fcnNum}='MLCallMessageHandler'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'FcnPtr', 'MLinkPtr', 'int32', 'int32'};fcnNum=fcnNum+1;
% extern __MLProcPtr__ MLYielderCast ( MLYielderProcPtr yp ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrThunk';fcns.name{fcnNum}='MLYielderCast'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='FcnPtr'; fcns.RHS{fcnNum}={'FcnPtr'};fcnNum=fcnNum+1;
% extern __MLProcPtr__ MLHandlerCast ( MLHandlerProcPtr mh ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrThunk';fcns.name{fcnNum}='MLHandlerCast'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='FcnPtr'; fcns.RHS{fcnNum}={'FcnPtr'};fcnNum=fcnNum+1;
% extern MLEnvironmentParameter MLNewParameters ( unsigned long rev , unsigned long apirev ); 
fcns.thunkname{fcnNum}='voidPtrulongulongThunk';fcns.name{fcnNum}='MLNewParameters'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'ulong', 'ulong'};fcnNum=fcnNum+1;
% extern void MLReleaseParameters ( MLEnvironmentParameter ep ); 
fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='MLReleaseParameters'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% extern void MLSetAllocParameter ( MLEnvironmentParameter ep , MLAllocator allocator , MLDeallocator deallocator ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='MLSetAllocParameter'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'FcnPtr', 'FcnPtr'};fcnNum=fcnNum+1;
% extern long MLSetThreadSafeLinksParameter ( MLEnvironmentParameter ep ); 
fcns.thunkname{fcnNum}='longvoidPtrThunk';fcns.name{fcnNum}='MLSetThreadSafeLinksParameter'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% extern int MLAllocParameter ( MLEnvironmentParameter ep , MLAllocator * allocator , MLDeallocator * deallocator ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='MLAllocParameter'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'FcnPtrPtr', 'FcnPtrPtr'};fcnNum=fcnNum+1;
% extern long MLSetResourceParameter ( MLEnvironmentParameter ep , const char * path ); 
fcns.thunkname{fcnNum}='longvoidPtrcstringThunk';fcns.name{fcnNum}='MLSetResourceParameter'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'voidPtr', 'cstring'};fcnNum=fcnNum+1;
% extern long MLSetDeviceParameter ( MLEnvironmentParameter ep , const char * devspec ); 
fcns.thunkname{fcnNum}='longvoidPtrcstringThunk';fcns.name{fcnNum}='MLSetDeviceParameter'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'voidPtr', 'cstring'};fcnNum=fcnNum+1;
% extern long MLErrorParameter ( MLEnvironmentParameter ep ); 
fcns.thunkname{fcnNum}='longvoidPtrThunk';fcns.name{fcnNum}='MLErrorParameter'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% extern long MLSetEncodingParameter ( MLEnvironmentParameter ep , unsigned int etype ); 
fcns.thunkname{fcnNum}='longvoidPtruint32Thunk';fcns.name{fcnNum}='MLSetEncodingParameter'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'voidPtr', 'uint32'};fcnNum=fcnNum+1;
% extern long MLDoNotHandleSignalParameter ( MLEnvironmentParameter ep , int signum ); 
fcns.thunkname{fcnNum}='longvoidPtrint32Thunk';fcns.name{fcnNum}='MLDoNotHandleSignalParameter'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'voidPtr', 'int32'};fcnNum=fcnNum+1;
% extern void MLStopHandlingSignal ( MLEnvironment env , int signum ); 
fcns.thunkname{fcnNum}='voidvoidPtrint32Thunk';fcns.name{fcnNum}='MLStopHandlingSignal'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'ml_environmentPtr', 'int32'};fcnNum=fcnNum+1;
% extern void MLHandleSignal ( MLEnvironment env , int signum ); 
fcns.thunkname{fcnNum}='voidvoidPtrint32Thunk';fcns.name{fcnNum}='MLHandleSignal'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'ml_environmentPtr', 'int32'};fcnNum=fcnNum+1;
% extern long MLSetEnvironmentData ( MLEnvironment env , void * cookie ); 
fcns.thunkname{fcnNum}='longvoidPtrvoidPtrThunk';fcns.name{fcnNum}='MLSetEnvironmentData'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ml_environmentPtr', 'voidPtr'};fcnNum=fcnNum+1;
% extern void * MLEnvironmentData ( MLEnvironment env ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrThunk';fcns.name{fcnNum}='MLEnvironmentData'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'ml_environmentPtr'};fcnNum=fcnNum+1;
% extern int MLSetSignalHandler ( MLEnvironment env , int signum , void * so ); 
fcns.thunkname{fcnNum}='int32voidPtrint32voidPtrThunk';fcns.name{fcnNum}='MLSetSignalHandler'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ml_environmentPtr', 'int32', 'voidPtr'};fcnNum=fcnNum+1;
% extern int MLSetSignalHandlerFromFunction ( MLEnvironment env , int signum , MLSignalHandlerType sigfunc ); 
fcns.thunkname{fcnNum}='int32voidPtrint32voidPtrThunk';fcns.name{fcnNum}='MLSetSignalHandlerFromFunction'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ml_environmentPtr', 'int32', 'FcnPtr'};fcnNum=fcnNum+1;
% extern int MLUnsetSignalHandler ( MLEnvironment env , int signum , MLSignalHandlerType sigfunc ); 
fcns.thunkname{fcnNum}='int32voidPtrint32voidPtrThunk';fcns.name{fcnNum}='MLUnsetSignalHandler'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ml_environmentPtr', 'int32', 'FcnPtr'};fcnNum=fcnNum+1;
% extern long MLSetSymbolReplacement ( MLINK mlp , const char * priv , int prlen , const char * pub , int pblen ); 
fcns.thunkname{fcnNum}='longvoidPtrcstringint32cstringint32Thunk';fcns.name{fcnNum}='MLSetSymbolReplacement'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'MLinkPtr', 'cstring', 'int32', 'cstring', 'int32'};fcnNum=fcnNum+1;
% extern int MLClearSymbolReplacement ( MLINK mlp , long index ); 
fcns.thunkname{fcnNum}='int32voidPtrlongThunk';fcns.name{fcnNum}='MLClearSymbolReplacement'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'long'};fcnNum=fcnNum+1;
% extern void MLClearAllSymbolReplacements ( MLINK mlp ); 
fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='MLClearAllSymbolReplacements'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'MLinkPtr'};fcnNum=fcnNum+1;
% extern MLEnvironment MLInitialize ( MLEnvironmentParameter ep ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrThunk';fcns.name{fcnNum}='MLInitialize'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ml_environmentPtr'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% extern void MLDeinitialize ( MLEnvironment env ); 
fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='MLDeinitialize'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'ml_environmentPtr'};fcnNum=fcnNum+1;
% extern void MLVersionNumbers ( MLEnvironment env , int * inumb , int * rnumb , int * bnumb ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='MLVersionNumbers'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'ml_environmentPtr', 'int32Ptr', 'int32Ptr', 'int32Ptr'};fcnNum=fcnNum+1;
% extern int MLCompilerID ( MLEnvironment env , const char ** id ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='MLCompilerID'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ml_environmentPtr', 'stringPtrPtr'};fcnNum=fcnNum+1;
% extern void MLReleaseCompilerID ( MLEnvironment env , const char * id ); 
fcns.thunkname{fcnNum}='voidvoidPtrcstringThunk';fcns.name{fcnNum}='MLReleaseCompilerID'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'ml_environmentPtr', 'cstring'};fcnNum=fcnNum+1;
% extern int MLUCS2CompilerID ( MLEnvironment env , unsigned short ** id , int * length ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='MLUCS2CompilerID'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ml_environmentPtr', 'uint16PtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
% extern void MLReleaseUCS2CompilerID ( MLEnvironment env , unsigned short * id , int length ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='MLReleaseUCS2CompilerID'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'ml_environmentPtr', 'uint16Ptr', 'int32'};fcnNum=fcnNum+1;
% extern int MLUTF8CompilerID ( MLEnvironment env , unsigned char ** id , int * length ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='MLUTF8CompilerID'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ml_environmentPtr', 'uint8PtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
% extern void MLReleaseUTF8CompilerID ( MLEnvironment env , unsigned char * id , int length ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='MLReleaseUTF8CompilerID'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'ml_environmentPtr', 'uint8Ptr', 'int32'};fcnNum=fcnNum+1;
% extern int MLUTF16CompilerID ( MLEnvironment env , unsigned short ** id , int * length ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='MLUTF16CompilerID'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ml_environmentPtr', 'uint16PtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
% extern void MLReleaseUTF16CompilerID ( MLEnvironment env , unsigned short * id , int length ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='MLReleaseUTF16CompilerID'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'ml_environmentPtr', 'uint16Ptr', 'int32'};fcnNum=fcnNum+1;
% extern int MLUTF32CompilerID ( MLEnvironment env , unsigned int ** id , int * length ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='MLUTF32CompilerID'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ml_environmentPtr', 'uint32PtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
% extern void MLReleaseUTF32CompilerID ( MLEnvironment env , unsigned int * id , int length ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='MLReleaseUTF32CompilerID'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'ml_environmentPtr', 'uint32Ptr', 'int32'};fcnNum=fcnNum+1;
% extern MLEnvironment MLBegin ( MLEnvironmentParameter ep ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrThunk';fcns.name{fcnNum}='MLBegin'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ml_environmentPtr'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% extern void MLEnd ( MLEnvironment env ); 
fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='MLEnd'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'ml_environmentPtr'};fcnNum=fcnNum+1;
% extern int MLSetEnvIDString ( MLEnvironment ep , const char * environment_id ); 
fcns.thunkname{fcnNum}='int32voidPtrcstringThunk';fcns.name{fcnNum}='MLSetEnvIDString'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ml_environmentPtr', 'cstring'};fcnNum=fcnNum+1;
% extern int MLGetLinkedEnvIDString ( MLINK mlp , const char ** environment_id ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='MLGetLinkedEnvIDString'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'stringPtrPtr'};fcnNum=fcnNum+1;
% extern void MLReleaseEnvIDString ( MLINK mlp , const char * environment_id ); 
fcns.thunkname{fcnNum}='voidvoidPtrcstringThunk';fcns.name{fcnNum}='MLReleaseEnvIDString'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'MLinkPtr', 'cstring'};fcnNum=fcnNum+1;
% extern char ** MLGetNetworkAddressList ( MLEnvironment ep , unsigned long * size ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='MLGetNetworkAddressList'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='stringPtrPtr'; fcns.RHS{fcnNum}={'ml_environmentPtr', 'ulongPtr'};fcnNum=fcnNum+1;
% extern void MLReleaseNetworkAddressList ( MLEnvironment ep , char ** addresses , unsigned long size ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrulongThunk';fcns.name{fcnNum}='MLReleaseNetworkAddressList'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'ml_environmentPtr', 'stringPtrPtr', 'ulong'};fcnNum=fcnNum+1;
% extern char ** MLGetDomainNameList ( MLEnvironment ep , unsigned long * size ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='MLGetDomainNameList'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='stringPtrPtr'; fcns.RHS{fcnNum}={'ml_environmentPtr', 'ulongPtr'};fcnNum=fcnNum+1;
% extern void MLReleaseDomainNameList ( MLEnvironment ep , char ** dnsnames , unsigned long size ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrulongThunk';fcns.name{fcnNum}='MLReleaseDomainNameList'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'ml_environmentPtr', 'stringPtrPtr', 'ulong'};fcnNum=fcnNum+1;
% extern int MLGetAvailableLinkProtocolNames ( MLEnvironment ep , char *** protocolNames , int * length ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='MLGetAvailableLinkProtocolNames'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ml_environmentPtr', 'int8PtrPtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
% extern void MLReleaseLinkProtocolNames ( MLEnvironment ep , char ** protocolNames , int length ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='MLReleaseLinkProtocolNames'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'ml_environmentPtr', 'stringPtrPtr', 'int32'};fcnNum=fcnNum+1;
% extern int MLGetLinksFromEnvironment ( MLEnvironment ep , MLINK ** links , int * length ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='MLGetLinksFromEnvironment'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ml_environmentPtr', 'MLinkPtrPtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
% extern void MLReleaseLinksFromEnvironment ( MLEnvironment ep , MLINK * links , int length ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='MLReleaseLinksFromEnvironment'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'ml_environmentPtr', 'MLinkPtrPtr', 'int32'};fcnNum=fcnNum+1;
% extern long MLNumericsQuery ( MLEnvironment ep , unsigned long selector , void * p1 , void * p2 , long * np ); 
fcns.thunkname{fcnNum}='longvoidPtrulongvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='MLNumericsQuery'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ml_environmentPtr', 'ulong', 'voidPtr', 'voidPtr', 'longPtr'};fcnNum=fcnNum+1;
% extern int MLValid ( MLINK mlp ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='MLValid'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr'};fcnNum=fcnNum+1;
% extern MLINK MLCreateLinkWithExternalProtocol ( MLEnvironment ep , dev_type dev , dev_main_type dev_main , int * errp ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='MLCreateLinkWithExternalProtocol'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='MLinkPtr'; fcns.RHS{fcnNum}={'ml_environmentPtr', 'voidPtr', 'FcnPtr', 'int32Ptr'};fcnNum=fcnNum+1;
% extern char ** MLFilterArgv ( MLEnvironment ep , char ** argv , char ** argv_end ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='MLFilterArgv'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='stringPtrPtr'; fcns.RHS{fcnNum}={'ml_environmentPtr', 'stringPtrPtr', 'stringPtrPtr'};fcnNum=fcnNum+1;
% extern long MLFeatureString ( MLINK mlp , char * buf , long buffsize ); 
fcns.thunkname{fcnNum}='longvoidPtrcstringlongThunk';fcns.name{fcnNum}='MLFeatureString'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'MLinkPtr', 'cstring', 'long'};fcnNum=fcnNum+1;
% extern MLINK MLOpenArgv ( MLEnvironment ep , char ** argv , char ** argv_end , int * errp ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='MLOpenArgv'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='MLinkPtr'; fcns.RHS{fcnNum}={'ml_environmentPtr', 'stringPtrPtr', 'stringPtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
% extern MLINK MLOpenArgcArgv ( MLEnvironment ep , int argc , char ** argv , int * errp ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrint32voidPtrvoidPtrThunk';fcns.name{fcnNum}='MLOpenArgcArgv'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='MLinkPtr'; fcns.RHS{fcnNum}={'ml_environmentPtr', 'int32', 'stringPtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
% extern MLINK MLOpenString ( MLEnvironment ep , const char * command_line , int * errp ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrcstringvoidPtrThunk';fcns.name{fcnNum}='MLOpenString'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='MLinkPtr'; fcns.RHS{fcnNum}={'ml_environmentPtr', 'cstring', 'int32Ptr'};fcnNum=fcnNum+1;
% extern MLINK MLLoopbackOpen ( MLEnvironment ep , int * errp ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='MLLoopbackOpen'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='MLinkPtr'; fcns.RHS{fcnNum}={'ml_environmentPtr', 'int32Ptr'};fcnNum=fcnNum+1;
% extern int MLStringToArgv ( const char * commandline , char * buf , char ** argv , int len ); 
fcns.thunkname{fcnNum}='int32cstringcstringvoidPtrint32Thunk';fcns.name{fcnNum}='MLStringToArgv'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring', 'cstring', 'stringPtrPtr', 'int32'};fcnNum=fcnNum+1;
% extern long MLScanString ( char ** argv , char *** argv_end , char ** commandline , char ** buf ); 
fcns.thunkname{fcnNum}='longvoidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='MLScanString'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'stringPtrPtr', 'int8PtrPtrPtr', 'stringPtrPtr', 'stringPtrPtr'};fcnNum=fcnNum+1;
% extern long MLPrintArgv ( char * buf , char ** buf_endp , char *** argvp , char ** argv_end ); 
fcns.thunkname{fcnNum}='longcstringvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='MLPrintArgv'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'stringPtrPtr', 'int8PtrPtrPtr', 'stringPtrPtr'};fcnNum=fcnNum+1;
% extern const char * MLErrorMessage ( MLINK mlp ); 
fcns.thunkname{fcnNum}='cstringvoidPtrThunk';fcns.name{fcnNum}='MLErrorMessage'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}={'MLinkPtr'};fcnNum=fcnNum+1;
% extern const char * MLErrorString ( MLEnvironment env , long err ); 
fcns.thunkname{fcnNum}='cstringvoidPtrlongThunk';fcns.name{fcnNum}='MLErrorString'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}={'ml_environmentPtr', 'long'};fcnNum=fcnNum+1;
% extern const unsigned short * MLUCS2ErrorMessage ( MLINK mlp , int * length ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='MLUCS2ErrorMessage'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint16Ptr'; fcns.RHS{fcnNum}={'MLinkPtr', 'int32Ptr'};fcnNum=fcnNum+1;
% extern const unsigned char * MLUTF8ErrorMessage ( MLINK mlp , int * length ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='MLUTF8ErrorMessage'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint8Ptr'; fcns.RHS{fcnNum}={'MLinkPtr', 'int32Ptr'};fcnNum=fcnNum+1;
% extern const unsigned short * MLUTF16ErrorMessage ( MLINK mlp , int * length ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='MLUTF16ErrorMessage'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint16Ptr'; fcns.RHS{fcnNum}={'MLinkPtr', 'int32Ptr'};fcnNum=fcnNum+1;
% extern const unsigned int * MLUTF32ErrorMessage ( MLINK mlp , int * length ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='MLUTF32ErrorMessage'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32Ptr'; fcns.RHS{fcnNum}={'MLinkPtr', 'int32Ptr'};fcnNum=fcnNum+1;
% extern void MLReleaseErrorMessage ( MLINK mlp , const char * message ); 
fcns.thunkname{fcnNum}='voidvoidPtrcstringThunk';fcns.name{fcnNum}='MLReleaseErrorMessage'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'MLinkPtr', 'cstring'};fcnNum=fcnNum+1;
% extern void MLReleaseUCS2ErrorMessage ( MLINK mlp , const unsigned short * message , int length ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='MLReleaseUCS2ErrorMessage'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'MLinkPtr', 'uint16Ptr', 'int32'};fcnNum=fcnNum+1;
% extern void MLReleaseUTF8ErrorMessage ( MLINK mlp , const unsigned char * message , int length ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='MLReleaseUTF8ErrorMessage'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'MLinkPtr', 'uint8Ptr', 'int32'};fcnNum=fcnNum+1;
% extern void MLReleaseUTF16ErrorMessage ( MLINK mlp , const unsigned short * message , int length ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='MLReleaseUTF16ErrorMessage'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'MLinkPtr', 'uint16Ptr', 'int32'};fcnNum=fcnNum+1;
% extern void MLReleaseUTF32ErrorMessage ( MLINK mlp , const unsigned int * message , int length ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='MLReleaseUTF32ErrorMessage'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'MLinkPtr', 'uint32Ptr', 'int32'};fcnNum=fcnNum+1;
% extern MLINK MLOpen ( int argc , char ** argv ); 
fcns.thunkname{fcnNum}='voidPtrint32voidPtrThunk';fcns.name{fcnNum}='MLOpen'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='MLinkPtr'; fcns.RHS{fcnNum}={'int32', 'stringPtrPtr'};fcnNum=fcnNum+1;
% extern MLINK MLOpenInEnv ( MLEnvironment env , int argc , char ** argv , int * errp ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrint32voidPtrvoidPtrThunk';fcns.name{fcnNum}='MLOpenInEnv'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='MLinkPtr'; fcns.RHS{fcnNum}={'ml_environmentPtr', 'int32', 'stringPtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
% extern MLINK MLDuplicateLink ( MLINK parentmlp , const char * name , int * errp ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrcstringvoidPtrThunk';fcns.name{fcnNum}='MLDuplicateLink'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='MLinkPtr'; fcns.RHS{fcnNum}={'MLinkPtr', 'cstring', 'int32Ptr'};fcnNum=fcnNum+1;
% extern int MLConnect ( MLINK mlp ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='MLConnect'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr'};fcnNum=fcnNum+1;
% extern int MLActivate ( MLINK mlp ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='MLActivate'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr'};fcnNum=fcnNum+1;
% extern int MLEstablish ( MLINK mlp , feature_setp features ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='MLEstablish'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'feature_setPtr'};fcnNum=fcnNum+1;
% extern int MLEstablishString ( MLINK mlp , const char * features ); 
fcns.thunkname{fcnNum}='int32voidPtrcstringThunk';fcns.name{fcnNum}='MLEstablishString'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'cstring'};fcnNum=fcnNum+1;
% extern void MLClose ( MLINK mlp ); 
fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='MLClose'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'MLinkPtr'};fcnNum=fcnNum+1;
% extern void MLSetUserData ( MLINK mlp , void * data , MLUserFunction f ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='MLSetUserData'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'MLinkPtr', 'voidPtr', 'FcnPtr'};fcnNum=fcnNum+1;
% extern void * MLUserData ( MLINK mlp , MLUserFunctionType * fp ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='MLUserData'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'MLinkPtr', 'FcnPtrPtr'};fcnNum=fcnNum+1;
% extern void MLSetUserBlock ( MLINK mlp , void * userblock ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrThunk';fcns.name{fcnNum}='MLSetUserBlock'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'MLinkPtr', 'voidPtr'};fcnNum=fcnNum+1;
% extern void * MLUserBlock ( MLINK mlp ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrThunk';fcns.name{fcnNum}='MLUserBlock'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'MLinkPtr'};fcnNum=fcnNum+1;
% extern __MLProcPtr__ MLUserCast ( MLUserProcPtr f ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrThunk';fcns.name{fcnNum}='MLUserCast'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='FcnPtr'; fcns.RHS{fcnNum}={'FcnPtr'};fcnNum=fcnNum+1;
% extern int MLLogStreamToFile ( MLINK mlp , const char * name ); 
fcns.thunkname{fcnNum}='int32voidPtrcstringThunk';fcns.name{fcnNum}='MLLogStreamToFile'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'cstring'};fcnNum=fcnNum+1;
% extern int MLDisableLoggingStream ( MLINK mlp ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='MLDisableLoggingStream'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr'};fcnNum=fcnNum+1;
% extern int MLEnableLoggingStream ( MLINK mlp ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='MLEnableLoggingStream'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr'};fcnNum=fcnNum+1;
% extern int MLStopLoggingStreamToFile ( MLINK mlp , const char * name ); 
fcns.thunkname{fcnNum}='int32voidPtrcstringThunk';fcns.name{fcnNum}='MLStopLoggingStreamToFile'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'cstring'};fcnNum=fcnNum+1;
% extern int MLStopLoggingStream ( MLINK mlp ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='MLStopLoggingStream'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr'};fcnNum=fcnNum+1;
% extern int MLLogFileNameForLink ( MLINK mlp , const char ** name ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='MLLogFileNameForLink'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'stringPtrPtr'};fcnNum=fcnNum+1;
% extern void MLReleaseLogFileNameForLink ( MLINK mlp , const char * name ); 
fcns.thunkname{fcnNum}='voidvoidPtrcstringThunk';fcns.name{fcnNum}='MLReleaseLogFileNameForLink'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'MLinkPtr', 'cstring'};fcnNum=fcnNum+1;
% extern const char * MLName ( MLINK mlp ); 
fcns.thunkname{fcnNum}='cstringvoidPtrThunk';fcns.name{fcnNum}='MLName'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}={'MLinkPtr'};fcnNum=fcnNum+1;
% extern const char * MLLinkName ( MLINK mlp ); 
fcns.thunkname{fcnNum}='cstringvoidPtrThunk';fcns.name{fcnNum}='MLLinkName'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}={'MLinkPtr'};fcnNum=fcnNum+1;
% extern const unsigned short * MLUCS2LinkName ( MLINK mlp , int * length ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='MLUCS2LinkName'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint16Ptr'; fcns.RHS{fcnNum}={'MLinkPtr', 'int32Ptr'};fcnNum=fcnNum+1;
% extern const unsigned char * MLUTF8LinkName ( MLINK mlp , int * length ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='MLUTF8LinkName'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint8Ptr'; fcns.RHS{fcnNum}={'MLinkPtr', 'int32Ptr'};fcnNum=fcnNum+1;
% extern const unsigned short * MLUTF16LinkName ( MLINK mlp , int * length ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='MLUTF16LinkName'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint16Ptr'; fcns.RHS{fcnNum}={'MLinkPtr', 'int32Ptr'};fcnNum=fcnNum+1;
% extern const unsigned int * MLUTF32LinkName ( MLINK mlp , int * length ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='MLUTF32LinkName'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32Ptr'; fcns.RHS{fcnNum}={'MLinkPtr', 'int32Ptr'};fcnNum=fcnNum+1;
% extern void MLReleaseLinkName ( MLINK mlp , const char * name ); 
fcns.thunkname{fcnNum}='voidvoidPtrcstringThunk';fcns.name{fcnNum}='MLReleaseLinkName'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'MLinkPtr', 'cstring'};fcnNum=fcnNum+1;
% extern void MLReleaseUCS2LinkName ( MLINK mlp , const unsigned short * name , int length ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='MLReleaseUCS2LinkName'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'MLinkPtr', 'uint16Ptr', 'int32'};fcnNum=fcnNum+1;
% extern void MLReleaseUTF8LinkName ( MLINK mlp , const unsigned char * name , int length ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='MLReleaseUTF8LinkName'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'MLinkPtr', 'uint8Ptr', 'int32'};fcnNum=fcnNum+1;
% extern void MLReleaseUTF16LinkName ( MLINK mlp , const unsigned short * name , int length ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='MLReleaseUTF16LinkName'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'MLinkPtr', 'uint16Ptr', 'int32'};fcnNum=fcnNum+1;
% extern void MLReleaseUTF32LinkName ( MLINK mlp , const unsigned int * name , int length ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='MLReleaseUTF32LinkName'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'MLinkPtr', 'uint32Ptr', 'int32'};fcnNum=fcnNum+1;
% extern long MLNumber ( MLINK mlp ); 
fcns.thunkname{fcnNum}='longvoidPtrThunk';fcns.name{fcnNum}='MLNumber'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'MLinkPtr'};fcnNum=fcnNum+1;
% extern long MLToLinkID ( MLINK mlp ); 
fcns.thunkname{fcnNum}='longvoidPtrThunk';fcns.name{fcnNum}='MLToLinkID'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'MLinkPtr'};fcnNum=fcnNum+1;
% extern MLINK MLFromLinkID ( MLEnvironment ep , long n ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrlongThunk';fcns.name{fcnNum}='MLFromLinkID'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='MLinkPtr'; fcns.RHS{fcnNum}={'ml_environmentPtr', 'long'};fcnNum=fcnNum+1;
% extern char * MLSetName ( MLINK mlp , const char * name ); 
fcns.thunkname{fcnNum}='cstringvoidPtrcstringThunk';fcns.name{fcnNum}='MLSetName'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}={'MLinkPtr', 'cstring'};fcnNum=fcnNum+1;
% extern void * MLInit ( MLAllocator alloc , MLDeallocator dealloc , void * enclosing_environment ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='MLInit'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'FcnPtr', 'FcnPtr', 'voidPtr'};fcnNum=fcnNum+1;
% extern void MLDeinit ( void * env ); 
fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='MLDeinit'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% extern void * MLEnclosingEnvironment ( void * ep ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrThunk';fcns.name{fcnNum}='MLEnclosingEnvironment'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% extern void * MLinkEnvironment ( MLINK mlp ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrThunk';fcns.name{fcnNum}='MLinkEnvironment'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'MLinkPtr'};fcnNum=fcnNum+1;
% extern void MLEnableLinkLock ( MLINK mlp ); 
fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='MLEnableLinkLock'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'MLinkPtr'};fcnNum=fcnNum+1;
% extern void MLDisableLinkLock ( MLINK mlp ); 
fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='MLDisableLinkLock'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'MLinkPtr'};fcnNum=fcnNum+1;
% extern MLEnvironment MLLinkEnvironment ( MLINK mlp ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrThunk';fcns.name{fcnNum}='MLLinkEnvironment'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ml_environmentPtr'; fcns.RHS{fcnNum}={'MLinkPtr'};fcnNum=fcnNum+1;
% extern int MLIsLinkLoopback ( MLINK mlp ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='MLIsLinkLoopback'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr'};fcnNum=fcnNum+1;
% extern MLYieldFunctionObject MLDefaultYieldFunction ( MLEnvironment env ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrThunk';fcns.name{fcnNum}='MLDefaultYieldFunction'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='FcnPtr'; fcns.RHS{fcnNum}={'ml_environmentPtr'};fcnNum=fcnNum+1;
% extern int MLSetDefaultYieldFunction ( MLEnvironment env , MLYieldFunctionObject yf ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='MLSetDefaultYieldFunction'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ml_environmentPtr', 'FcnPtr'};fcnNum=fcnNum+1;
% extern MLLinkServer MLNewLinkServer ( MLEnvironment env , void * context , int * error ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='MLNewLinkServer'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'ml_environmentPtr', 'voidPtr', 'int32Ptr'};fcnNum=fcnNum+1;
% extern MLLinkServer MLNewLinkServerWithPort ( MLEnvironment env , unsigned short port , void * context , int * error ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtruint16voidPtrvoidPtrThunk';fcns.name{fcnNum}='MLNewLinkServerWithPort'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'ml_environmentPtr', 'uint16', 'voidPtr', 'int32Ptr'};fcnNum=fcnNum+1;
% extern MLLinkServer MLNewLinkServerWithPortAndInterface ( MLEnvironment env , unsigned short port , const char * iface , void * context , int * error ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtruint16cstringvoidPtrvoidPtrThunk';fcns.name{fcnNum}='MLNewLinkServerWithPortAndInterface'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'ml_environmentPtr', 'uint16', 'cstring', 'voidPtr', 'int32Ptr'};fcnNum=fcnNum+1;
% extern void MLShutdownLinkServer ( MLLinkServer server ); 
fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='MLShutdownLinkServer'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% extern void MLRegisterCallbackFunctionWithLinkServer ( MLLinkServer server , MLNewLinkCallbackFunction function ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrThunk';fcns.name{fcnNum}='MLRegisterCallbackFunctionWithLinkServer'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'FcnPtr'};fcnNum=fcnNum+1;
% extern MLINK MLWaitForNewLinkFromLinkServer ( MLLinkServer server , int * error ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='MLWaitForNewLinkFromLinkServer'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='MLinkPtr'; fcns.RHS{fcnNum}={'voidPtr', 'int32Ptr'};fcnNum=fcnNum+1;
% extern unsigned short MLPortFromLinkServer ( MLLinkServer server , int * error ); 
fcns.thunkname{fcnNum}='uint16voidPtrvoidPtrThunk';fcns.name{fcnNum}='MLPortFromLinkServer'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint16'; fcns.RHS{fcnNum}={'voidPtr', 'int32Ptr'};fcnNum=fcnNum+1;
% extern const char * MLInterfaceFromLinkServer ( MLLinkServer server , int * error ); 
fcns.thunkname{fcnNum}='cstringvoidPtrvoidPtrThunk';fcns.name{fcnNum}='MLInterfaceFromLinkServer'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}={'voidPtr', 'int32Ptr'};fcnNum=fcnNum+1;
% extern void * MLContextFromLinkServer ( MLLinkServer server , int * error ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='MLContextFromLinkServer'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'voidPtr', 'int32Ptr'};fcnNum=fcnNum+1;
% extern void MLReleaseInterfaceFromLinkServer ( MLLinkServer server , const char * iface ); 
fcns.thunkname{fcnNum}='voidvoidPtrcstringThunk';fcns.name{fcnNum}='MLReleaseInterfaceFromLinkServer'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr', 'cstring'};fcnNum=fcnNum+1;
% extern int MLBrowseForLinkServices ( MLEnvironment env , MLBrowseCallbackFunction callbackFunction , const char * serviceProtocol , const char * domain , void * context , MLServiceRef * ref ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrcstringcstringvoidPtrvoidPtrThunk';fcns.name{fcnNum}='MLBrowseForLinkServices'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ml_environmentPtr', 'FcnPtr', 'cstring', 'cstring', 'voidPtr', 'voidPtrPtr'};fcnNum=fcnNum+1;
% extern void MLStopBrowsingForLinkServices ( MLEnvironment env , MLServiceRef ref ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrThunk';fcns.name{fcnNum}='MLStopBrowsingForLinkServices'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'ml_environmentPtr', 'voidPtr'};fcnNum=fcnNum+1;
% extern int MLResolveLinkService ( MLEnvironment env , MLResolveCallbackFunction , const char * serviceProtocol , const char * serviceName , void * context , MLServiceRef * ref ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrcstringcstringvoidPtrvoidPtrThunk';fcns.name{fcnNum}='MLResolveLinkService'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ml_environmentPtr', 'FcnPtr', 'cstring', 'cstring', 'voidPtr', 'voidPtrPtr'};fcnNum=fcnNum+1;
% extern void MLStopResolvingLinkService ( MLEnvironment env , MLServiceRef ref ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrThunk';fcns.name{fcnNum}='MLStopResolvingLinkService'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'ml_environmentPtr', 'voidPtr'};fcnNum=fcnNum+1;
% extern MLINK MLRegisterLinkServiceWithPortAndHostname ( MLEnvironment env , const char * serviceProtocol , const char * serviceName , unsigned short port , const char * hostname , MLRegisterCallbackFunction function , const char * domain , void * context , MLServiceRef * ref , int * error ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrcstringcstringuint16cstringvoidPtrcstringvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='MLRegisterLinkServiceWithPortAndHostname'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='MLinkPtr'; fcns.RHS{fcnNum}={'ml_environmentPtr', 'cstring', 'cstring', 'uint16', 'cstring', 'FcnPtr', 'cstring', 'voidPtr', 'voidPtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
% extern MLINK MLRegisterLinkServiceWithHostname ( MLEnvironment env , const char * serviceProtocol , const char * serviceName , const char * hostname , MLRegisterCallbackFunction function , const char * domain , void * context , MLServiceRef * ref , int * error ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrcstringcstringcstringvoidPtrcstringvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='MLRegisterLinkServiceWithHostname'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='MLinkPtr'; fcns.RHS{fcnNum}={'ml_environmentPtr', 'cstring', 'cstring', 'cstring', 'FcnPtr', 'cstring', 'voidPtr', 'voidPtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
% extern MLINK MLRegisterLinkService ( MLEnvironment env , const char * serviceProtocol , const char * serviceName , MLRegisterCallbackFunction function , const char * domain , void * context , MLServiceRef *, int * error ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrcstringcstringvoidPtrcstringvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='MLRegisterLinkService'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='MLinkPtr'; fcns.RHS{fcnNum}={'ml_environmentPtr', 'cstring', 'cstring', 'FcnPtr', 'cstring', 'voidPtr', 'voidPtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
% extern void MLRegisterLinkServiceFromLinkServer ( MLEnvironment env , const char * serviceProtocol , const char * serviceName , MLLinkServer server , MLRegisterCallbackFunction function , const char * domain , void * context , MLServiceRef * ref , int * error ); 
fcns.thunkname{fcnNum}='voidvoidPtrcstringcstringvoidPtrvoidPtrcstringvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='MLRegisterLinkServiceFromLinkServer'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'ml_environmentPtr', 'cstring', 'cstring', 'voidPtr', 'FcnPtr', 'cstring', 'voidPtr', 'voidPtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
% extern void MLStopRegisteringLinkService ( MLEnvironment env , MLServiceRef ref ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrThunk';fcns.name{fcnNum}='MLStopRegisteringLinkService'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'ml_environmentPtr', 'voidPtr'};fcnNum=fcnNum+1;
% extern void MLStopRegisteringLinkServiceForLink ( MLEnvironment env , MLINK link , MLServiceRef ref ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='MLStopRegisteringLinkServiceForLink'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'ml_environmentPtr', 'MLinkPtr', 'voidPtr'};fcnNum=fcnNum+1;
% extern const char * MLServiceProtocolFromReference ( MLEnvironment env , MLServiceRef ref ); 
fcns.thunkname{fcnNum}='cstringvoidPtrvoidPtrThunk';fcns.name{fcnNum}='MLServiceProtocolFromReference'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}={'ml_environmentPtr', 'voidPtr'};fcnNum=fcnNum+1;
% extern int MLError ( MLINK mlp ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='MLError'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr'};fcnNum=fcnNum+1;
% extern int MLClearError ( MLINK mlp ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='MLClearError'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr'};fcnNum=fcnNum+1;
% extern int MLSetError ( MLINK mlp , int err ); 
fcns.thunkname{fcnNum}='int32voidPtrint32Thunk';fcns.name{fcnNum}='MLSetError'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'int32'};fcnNum=fcnNum+1;
% extern int MLPutMessage ( MLINK mlp , int msg ); 
fcns.thunkname{fcnNum}='int32voidPtrint32Thunk';fcns.name{fcnNum}='MLPutMessage'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'int32'};fcnNum=fcnNum+1;
% extern int MLGetMessage ( MLINK mlp , int * mp , int * np ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='MLGetMessage'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'int32Ptr', 'int32Ptr'};fcnNum=fcnNum+1;
% extern int MLMessageReady ( MLINK mlp ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='MLMessageReady'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr'};fcnNum=fcnNum+1;
% extern int MLPutMessageWithArg ( MLINK mlp , int msg , int arg ); 
fcns.thunkname{fcnNum}='int32voidPtrint32int32Thunk';fcns.name{fcnNum}='MLPutMessageWithArg'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'int32', 'int32'};fcnNum=fcnNum+1;
% extern MLMessageHandlerObject MLGetMessageHandler ( MLINK mlp ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrThunk';fcns.name{fcnNum}='MLGetMessageHandler'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='FcnPtr'; fcns.RHS{fcnNum}={'MLinkPtr'};fcnNum=fcnNum+1;
% extern MLMessageHandlerObject MLMessageHandler ( MLINK mlp ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrThunk';fcns.name{fcnNum}='MLMessageHandler'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='FcnPtr'; fcns.RHS{fcnNum}={'MLinkPtr'};fcnNum=fcnNum+1;
% extern MLYieldFunctionObject MLGetYieldFunction ( MLINK mlp ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrThunk';fcns.name{fcnNum}='MLGetYieldFunction'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='FcnPtr'; fcns.RHS{fcnNum}={'MLinkPtr'};fcnNum=fcnNum+1;
% extern MLYieldFunctionObject MLYieldFunction ( MLINK mlp ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrThunk';fcns.name{fcnNum}='MLYieldFunction'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='FcnPtr'; fcns.RHS{fcnNum}={'MLinkPtr'};fcnNum=fcnNum+1;
% extern int MLSetMessageHandler ( MLINK mlp , MLMessageHandlerObject h ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='MLSetMessageHandler'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'FcnPtr'};fcnNum=fcnNum+1;
% extern int MLSetYieldFunction ( MLINK mlp , MLYieldFunctionObject yf ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='MLSetYieldFunction'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'FcnPtr'};fcnNum=fcnNum+1;
% extern int MLDeviceInformation ( MLINK mlp , devinfo_selector selector , void * buf , long * buflen ); 
fcns.thunkname{fcnNum}='int32voidPtrulongvoidPtrvoidPtrThunk';fcns.name{fcnNum}='MLDeviceInformation'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'ulong', 'voidPtr', 'longPtr'};fcnNum=fcnNum+1;
% extern int MLLowLevelDeviceName ( MLINK mlp , const char ** name ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='MLLowLevelDeviceName'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'stringPtrPtr'};fcnNum=fcnNum+1;
% extern void MLReleaseLowLevelDeviceName ( MLINK mlp , const char * name ); 
fcns.thunkname{fcnNum}='voidvoidPtrcstringThunk';fcns.name{fcnNum}='MLReleaseLowLevelDeviceName'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'MLinkPtr', 'cstring'};fcnNum=fcnNum+1;
% extern int MLGetNext ( MLINK mlp ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='MLGetNext'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr'};fcnNum=fcnNum+1;
% extern int MLGetNextRaw ( MLINK mlp ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='MLGetNextRaw'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr'};fcnNum=fcnNum+1;
% extern int MLGetType ( MLINK mlp ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='MLGetType'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr'};fcnNum=fcnNum+1;
% extern int MLGetRawType ( MLINK mlp ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='MLGetRawType'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr'};fcnNum=fcnNum+1;
% extern int MLGetRawData ( MLINK mlp , unsigned char * data , int size , int * gotp ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrint32voidPtrThunk';fcns.name{fcnNum}='MLGetRawData'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'uint8Ptr', 'int32', 'int32Ptr'};fcnNum=fcnNum+1;
% extern int MLGetData ( MLINK mlp , char * data , int size , int * gotp ); 
fcns.thunkname{fcnNum}='int32voidPtrcstringint32voidPtrThunk';fcns.name{fcnNum}='MLGetData'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'cstring', 'int32', 'int32Ptr'};fcnNum=fcnNum+1;
% extern int MLGetArgCount ( MLINK mlp , int * countp ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='MLGetArgCount'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'int32Ptr'};fcnNum=fcnNum+1;
% extern int MLGetRawArgCount ( MLINK mlp , int * countp ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='MLGetRawArgCount'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'int32Ptr'};fcnNum=fcnNum+1;
% extern int MLBytesToGet ( MLINK mlp , int * leftp ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='MLBytesToGet'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'int32Ptr'};fcnNum=fcnNum+1;
% extern int MLRawBytesToGet ( MLINK mlp , int * leftp ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='MLRawBytesToGet'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'int32Ptr'};fcnNum=fcnNum+1;
% extern int MLExpressionsToGet ( MLINK mlp , int * countp ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='MLExpressionsToGet'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'int32Ptr'};fcnNum=fcnNum+1;
% extern int MLNewPacket ( MLINK mlp ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='MLNewPacket'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr'};fcnNum=fcnNum+1;
% extern int MLTakeLast ( MLINK mlp , int eleft ); 
fcns.thunkname{fcnNum}='int32voidPtrint32Thunk';fcns.name{fcnNum}='MLTakeLast'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'int32'};fcnNum=fcnNum+1;
% extern int MLFill ( MLINK mlp ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='MLFill'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr'};fcnNum=fcnNum+1;
% extern int MLPutNext ( MLINK mlp , int tok ); 
fcns.thunkname{fcnNum}='int32voidPtrint32Thunk';fcns.name{fcnNum}='MLPutNext'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'int32'};fcnNum=fcnNum+1;
% extern int MLPutType ( MLINK mlp , int tok ); 
fcns.thunkname{fcnNum}='int32voidPtrint32Thunk';fcns.name{fcnNum}='MLPutType'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'int32'};fcnNum=fcnNum+1;
% extern int MLPutRawSize ( MLINK mlp , int size ); 
fcns.thunkname{fcnNum}='int32voidPtrint32Thunk';fcns.name{fcnNum}='MLPutRawSize'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'int32'};fcnNum=fcnNum+1;
% extern int MLPutRawData ( MLINK mlp , const unsigned char * data , int len ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='MLPutRawData'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'uint8Ptr', 'int32'};fcnNum=fcnNum+1;
% extern int MLPutArgCount ( MLINK mlp , int argc ); 
fcns.thunkname{fcnNum}='int32voidPtrint32Thunk';fcns.name{fcnNum}='MLPutArgCount'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'int32'};fcnNum=fcnNum+1;
% extern int MLPutComposite ( MLINK mlp , int argc ); 
fcns.thunkname{fcnNum}='int32voidPtrint32Thunk';fcns.name{fcnNum}='MLPutComposite'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'int32'};fcnNum=fcnNum+1;
% extern int MLBytesToPut ( MLINK mlp , int * leftp ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='MLBytesToPut'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'int32Ptr'};fcnNum=fcnNum+1;
% extern int MLEndPacket ( MLINK mlp ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='MLEndPacket'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr'};fcnNum=fcnNum+1;
% extern int MLFlush ( MLINK mlp ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='MLFlush'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr'};fcnNum=fcnNum+1;
% extern int MLGetBinaryNumber ( MLINK mlp , void * np , long type ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrlongThunk';fcns.name{fcnNum}='MLGetBinaryNumber'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'voidPtr', 'long'};fcnNum=fcnNum+1;
% extern int MLGetShortInteger ( MLINK mlp , short * hp ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='MLGetShortInteger'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'int16Ptr'};fcnNum=fcnNum+1;
% extern int MLGetInteger ( MLINK mlp , int * ip ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='MLGetInteger'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'int32Ptr'};fcnNum=fcnNum+1;
% extern int MLGetLongInteger ( MLINK mlp , long * lp ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='MLGetLongInteger'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'longPtr'};fcnNum=fcnNum+1;
% extern int MLGetInteger16 ( MLINK mlp , short * hp ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='MLGetInteger16'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'int16Ptr'};fcnNum=fcnNum+1;
% extern int MLGetInteger32 ( MLINK mlp , int * ip ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='MLGetInteger32'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'int32Ptr'};fcnNum=fcnNum+1;
% extern int MLGetInteger64 ( MLINK mlp , mlint64 * wp ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='MLGetInteger64'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'int64Ptr'};fcnNum=fcnNum+1;
% extern int MLGetInteger8 ( MLINK mlp , unsigned char * cp ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='MLGetInteger8'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'uint8Ptr'};fcnNum=fcnNum+1;
% extern int MLGetFloat ( MLINK mlp , float * fp ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='MLGetFloat'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'singlePtr'};fcnNum=fcnNum+1;
% extern int MLGetDouble ( MLINK mlp , double * dp ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='MLGetDouble'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'doublePtr'};fcnNum=fcnNum+1;
% extern int MLGetReal ( MLINK mlp , double * dp ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='MLGetReal'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'doublePtr'};fcnNum=fcnNum+1;
% extern int MLGetLongDouble ( MLINK mlp , mlextended_double * xp ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='MLGetLongDouble'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'errorPtr'};fcnNum=fcnNum+1;
% extern int MLGetReal32 ( MLINK mlp , float * fp ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='MLGetReal32'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'singlePtr'};fcnNum=fcnNum+1;
% extern int MLGetReal64 ( MLINK mlp , double * dp ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='MLGetReal64'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'doublePtr'};fcnNum=fcnNum+1;
% extern int MLGetReal128 ( MLINK mlp , mlextended_double * dp ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='MLGetReal128'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'errorPtr'};fcnNum=fcnNum+1;
% extern int MLGet8BitCharacters ( MLINK mlp , long * chars_left , unsigned char * buf , long cardof_buf , long * got , long missing ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrlongvoidPtrlongThunk';fcns.name{fcnNum}='MLGet8BitCharacters'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'longPtr', 'uint8Ptr', 'long', 'longPtr', 'long'};fcnNum=fcnNum+1;
% extern int MLGet7BitCharacters ( MLINK mlp , long * chars_left , char * buf , long cardof_buf , long * got ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrcstringlongvoidPtrThunk';fcns.name{fcnNum}='MLGet7BitCharacters'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'longPtr', 'cstring', 'long', 'longPtr'};fcnNum=fcnNum+1;
% extern int MLGetUCS2Characters ( MLINK mlp , int * chars_left , unsigned short * buf , int cardof_buf , int * got ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrint32voidPtrThunk';fcns.name{fcnNum}='MLGetUCS2Characters'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'int32Ptr', 'uint16Ptr', 'int32', 'int32Ptr'};fcnNum=fcnNum+1;
% extern int MLGetUTF8Characters ( MLINK mlp , int * chars_left , unsigned char * buf , int cardof_buf , int * got ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrint32voidPtrThunk';fcns.name{fcnNum}='MLGetUTF8Characters'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'int32Ptr', 'uint8Ptr', 'int32', 'int32Ptr'};fcnNum=fcnNum+1;
% extern int MLGetUTF16Characters ( MLINK mlp , int * chars_left , unsigned short * buf , int cardof_buf , int * got ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrint32voidPtrThunk';fcns.name{fcnNum}='MLGetUTF16Characters'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'int32Ptr', 'uint16Ptr', 'int32', 'int32Ptr'};fcnNum=fcnNum+1;
% extern int MLGetUTF32Characters ( MLINK mlp , int * chars_left , unsigned int * buf , int cardof_buf , int * got ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrint32voidPtrThunk';fcns.name{fcnNum}='MLGetUTF32Characters'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'int32Ptr', 'uint32Ptr', 'int32', 'int32Ptr'};fcnNum=fcnNum+1;
% extern int MLGetByteString ( MLINK mlp , const unsigned char ** sp , int * lenp , long missing ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrlongThunk';fcns.name{fcnNum}='MLGetByteString'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'uint8PtrPtr', 'int32Ptr', 'long'};fcnNum=fcnNum+1;
% extern int MLGetString ( MLINK mlp , const char ** sp ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='MLGetString'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'stringPtrPtr'};fcnNum=fcnNum+1;
% extern int MLGetUCS2String ( MLINK mlp , const unsigned short ** sp , int * lenp ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='MLGetUCS2String'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'uint16PtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
% extern int MLGetUTF8String ( MLINK mlp , const unsigned char ** sp , int * bytes , int * chars ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='MLGetUTF8String'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'uint8PtrPtr', 'int32Ptr', 'int32Ptr'};fcnNum=fcnNum+1;
% extern int MLGetUTF16String ( MLINK mlp , const unsigned short ** sp , int * ncodes , int * chars ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='MLGetUTF16String'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'uint16PtrPtr', 'int32Ptr', 'int32Ptr'};fcnNum=fcnNum+1;
% extern int MLGetUTF32String ( MLINK mlp , const unsigned int ** sp , int * len ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='MLGetUTF32String'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'uint32PtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
% extern int MLGetNumberAsByteString ( MLINK mlp , const unsigned char ** sp , long * lenp , long missing ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrlongThunk';fcns.name{fcnNum}='MLGetNumberAsByteString'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'uint8PtrPtr', 'longPtr', 'long'};fcnNum=fcnNum+1;
% extern int MLGetNumberAsString ( MLINK mlp , const char ** sp ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='MLGetNumberAsString'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'stringPtrPtr'};fcnNum=fcnNum+1;
% extern int MLGetNumberAsUCS2String ( MLINK mlp , const unsigned short ** sp , int * lenp ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='MLGetNumberAsUCS2String'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'uint16PtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
% extern int MLGetNumberAsUTF8String ( MLINK mlp , const unsigned char ** sp , int * bytes , int * chars ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='MLGetNumberAsUTF8String'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'uint8PtrPtr', 'int32Ptr', 'int32Ptr'};fcnNum=fcnNum+1;
% extern int MLGetNumberAsUTF16String ( MLINK mlp , const unsigned short ** sp , int * ncodes , int * chars ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='MLGetNumberAsUTF16String'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'uint16PtrPtr', 'int32Ptr', 'int32Ptr'};fcnNum=fcnNum+1;
% extern int MLGetNumberAsUTF32String ( MLINK mlp , const unsigned int ** sp , int * lenp ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='MLGetNumberAsUTF32String'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'uint32PtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
% extern void MLReleaseUCS2String ( MLINK mlp , const unsigned short * s , int len ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='MLReleaseUCS2String'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'MLinkPtr', 'uint16Ptr', 'int32'};fcnNum=fcnNum+1;
% extern void MLReleaseUTF8String ( MLINK mlp , const unsigned char * s , int len ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='MLReleaseUTF8String'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'MLinkPtr', 'uint8Ptr', 'int32'};fcnNum=fcnNum+1;
% extern void MLReleaseUTF16String ( MLINK mlp , const unsigned short * s , int len ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='MLReleaseUTF16String'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'MLinkPtr', 'uint16Ptr', 'int32'};fcnNum=fcnNum+1;
% extern void MLReleaseUTF32String ( MLINK mlp , const unsigned int * s , int len ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='MLReleaseUTF32String'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'MLinkPtr', 'uint32Ptr', 'int32'};fcnNum=fcnNum+1;
% extern void MLReleaseByteString ( MLINK mlp , const unsigned char * s , int len ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='MLReleaseByteString'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'MLinkPtr', 'uint8Ptr', 'int32'};fcnNum=fcnNum+1;
% extern void MLReleaseString ( MLINK mlp , const char * s ); 
fcns.thunkname{fcnNum}='voidvoidPtrcstringThunk';fcns.name{fcnNum}='MLReleaseString'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'MLinkPtr', 'cstring'};fcnNum=fcnNum+1;
% extern int MLTestString ( MLINK mlp , const char * name ); 
fcns.thunkname{fcnNum}='int32voidPtrcstringThunk';fcns.name{fcnNum}='MLTestString'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'cstring'};fcnNum=fcnNum+1;
% extern int MLTestUCS2String ( MLINK mlp , const unsigned short * name , int length ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='MLTestUCS2String'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'uint16Ptr', 'int32'};fcnNum=fcnNum+1;
% extern int MLTestUTF8String ( MLINK mlp , const unsigned char * name , int length ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='MLTestUTF8String'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'uint8Ptr', 'int32'};fcnNum=fcnNum+1;
% extern int MLTestUTF16String ( MLINK mlp , const unsigned short * name , int length ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='MLTestUTF16String'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'uint16Ptr', 'int32'};fcnNum=fcnNum+1;
% extern int MLTestUTF32String ( MLINK mlp , const unsigned int * name , int length ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='MLTestUTF32String'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'uint32Ptr', 'int32'};fcnNum=fcnNum+1;
% extern int MLGetByteSymbol ( MLINK mlp , const unsigned char ** sp , int * lenp , long missing ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrlongThunk';fcns.name{fcnNum}='MLGetByteSymbol'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'uint8PtrPtr', 'int32Ptr', 'long'};fcnNum=fcnNum+1;
% extern int MLGetSymbol ( MLINK mlp , const char ** sp ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='MLGetSymbol'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'stringPtrPtr'};fcnNum=fcnNum+1;
% extern int MLGetUCS2Symbol ( MLINK mlp , const unsigned short ** sp , int * lenp ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='MLGetUCS2Symbol'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'uint16PtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
% extern int MLGetUTF8Symbol ( MLINK mlp , const unsigned char ** sp , int * bytes , int * chars ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='MLGetUTF8Symbol'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'uint8PtrPtr', 'int32Ptr', 'int32Ptr'};fcnNum=fcnNum+1;
% extern int MLGetUTF16Symbol ( MLINK mlp , const unsigned short ** sp , int * ncodes , int * chars ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='MLGetUTF16Symbol'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'uint16PtrPtr', 'int32Ptr', 'int32Ptr'};fcnNum=fcnNum+1;
% extern int MLGetUTF32Symbol ( MLINK mlp , const unsigned int ** sp , int * lenp ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='MLGetUTF32Symbol'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'uint32PtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
% extern void MLReleaseUCS2Symbol ( MLINK mlp , const unsigned short * s , int len ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='MLReleaseUCS2Symbol'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'MLinkPtr', 'uint16Ptr', 'int32'};fcnNum=fcnNum+1;
% extern void MLReleaseUTF8Symbol ( MLINK mlp , const unsigned char * s , int len ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='MLReleaseUTF8Symbol'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'MLinkPtr', 'uint8Ptr', 'int32'};fcnNum=fcnNum+1;
% extern void MLReleaseUTF16Symbol ( MLINK mlp , const unsigned short * s , int len ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='MLReleaseUTF16Symbol'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'MLinkPtr', 'uint16Ptr', 'int32'};fcnNum=fcnNum+1;
% extern void MLReleaseUTF32Symbol ( MLINK mlp , const unsigned int * s , int len ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='MLReleaseUTF32Symbol'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'MLinkPtr', 'uint32Ptr', 'int32'};fcnNum=fcnNum+1;
% extern void MLReleaseByteSymbol ( MLINK mlp , const unsigned char * s , int len ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='MLReleaseByteSymbol'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'MLinkPtr', 'uint8Ptr', 'int32'};fcnNum=fcnNum+1;
% extern void MLReleaseSymbol ( MLINK mlp , const char * s ); 
fcns.thunkname{fcnNum}='voidvoidPtrcstringThunk';fcns.name{fcnNum}='MLReleaseSymbol'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'MLinkPtr', 'cstring'};fcnNum=fcnNum+1;
% extern int MLTestSymbol ( MLINK mlp , const char * name ); 
fcns.thunkname{fcnNum}='int32voidPtrcstringThunk';fcns.name{fcnNum}='MLTestSymbol'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'cstring'};fcnNum=fcnNum+1;
% extern int MLTestUCS2Symbol ( MLINK mlp , const unsigned short * name , int length ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='MLTestUCS2Symbol'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'uint16Ptr', 'int32'};fcnNum=fcnNum+1;
% extern int MLTestUTF8Symbol ( MLINK mlp , const unsigned char * name , int length ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='MLTestUTF8Symbol'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'uint8Ptr', 'int32'};fcnNum=fcnNum+1;
% extern int MLTestUTF16Symbol ( MLINK mlp , const unsigned short * name , int length ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='MLTestUTF16Symbol'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'uint16Ptr', 'int32'};fcnNum=fcnNum+1;
% extern int MLTestUTF32Symbol ( MLINK mlp , const unsigned int * name , int length ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='MLTestUTF32Symbol'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'uint32Ptr', 'int32'};fcnNum=fcnNum+1;
% extern int MLGetFunction ( MLINK mlp , const char ** sp , int * countp ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='MLGetFunction'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'stringPtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
% extern int MLCheckFunction ( MLINK mlp , const char * s , long * countp ); 
fcns.thunkname{fcnNum}='int32voidPtrcstringvoidPtrThunk';fcns.name{fcnNum}='MLCheckFunction'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% extern int MLCheckFunctionWithArgCount ( MLINK mlp , const char * s , long * countp ); 
fcns.thunkname{fcnNum}='int32voidPtrcstringvoidPtrThunk';fcns.name{fcnNum}='MLCheckFunctionWithArgCount'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% extern int MLTestHead ( MLINK mlp , const char * s , int * countp ); 
fcns.thunkname{fcnNum}='int32voidPtrcstringvoidPtrThunk';fcns.name{fcnNum}='MLTestHead'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'cstring', 'int32Ptr'};fcnNum=fcnNum+1;
% extern int MLTestHeadWithArgCount ( MLINK mlp , const char * s , int * countp ); 
fcns.thunkname{fcnNum}='int32voidPtrcstringvoidPtrThunk';fcns.name{fcnNum}='MLTestHeadWithArgCount'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'cstring', 'int32Ptr'};fcnNum=fcnNum+1;
% extern int MLTestUCS2HeadWithArgCount ( MLINK mlp , const unsigned short * s , int length , int * countp ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrint32voidPtrThunk';fcns.name{fcnNum}='MLTestUCS2HeadWithArgCount'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'uint16Ptr', 'int32', 'int32Ptr'};fcnNum=fcnNum+1;
% extern int MLTestUTF16HeadWithArgCount ( MLINK mlp , const unsigned short * s , int length , int * countp ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrint32voidPtrThunk';fcns.name{fcnNum}='MLTestUTF16HeadWithArgCount'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'uint16Ptr', 'int32', 'int32Ptr'};fcnNum=fcnNum+1;
% extern int MLTestUTF32HeadWithArgCount ( MLINK mlp , const unsigned int * s , int length , int * countp ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrint32voidPtrThunk';fcns.name{fcnNum}='MLTestUTF32HeadWithArgCount'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'uint32Ptr', 'int32', 'int32Ptr'};fcnNum=fcnNum+1;
% extern int MLTestUTF8HeadWithArgCount ( MLINK mlp , const unsigned char * s , int length , int * countp ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrint32voidPtrThunk';fcns.name{fcnNum}='MLTestUTF8HeadWithArgCount'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'uint8Ptr', 'int32', 'int32Ptr'};fcnNum=fcnNum+1;
% extern int MLTestUCS2Head ( MLINK mlp , const unsigned short * s , int length , int * countp ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrint32voidPtrThunk';fcns.name{fcnNum}='MLTestUCS2Head'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'uint16Ptr', 'int32', 'int32Ptr'};fcnNum=fcnNum+1;
% extern int MLTestUTF8Head ( MLINK mlp , const unsigned char * s , int length , int * countp ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrint32voidPtrThunk';fcns.name{fcnNum}='MLTestUTF8Head'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'uint8Ptr', 'int32', 'int32Ptr'};fcnNum=fcnNum+1;
% extern int MLTestUTF16Head ( MLINK mlp , const unsigned short * s , int length , int * countp ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrint32voidPtrThunk';fcns.name{fcnNum}='MLTestUTF16Head'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'uint16Ptr', 'int32', 'int32Ptr'};fcnNum=fcnNum+1;
% extern int MLTestUTF32Head ( MLINK mlp , const unsigned int * s , int length , int * countp ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrint32voidPtrThunk';fcns.name{fcnNum}='MLTestUTF32Head'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'uint32Ptr', 'int32', 'int32Ptr'};fcnNum=fcnNum+1;
% extern int MLPutBinaryNumber ( MLINK mlp , void * np , long type ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrlongThunk';fcns.name{fcnNum}='MLPutBinaryNumber'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'voidPtr', 'long'};fcnNum=fcnNum+1;
% extern int MLPutShortInteger ( MLINK mlp , int h ); 
fcns.thunkname{fcnNum}='int32voidPtrint32Thunk';fcns.name{fcnNum}='MLPutShortInteger'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'int32'};fcnNum=fcnNum+1;
% extern int MLPutInteger ( MLINK mlp , int i ); 
fcns.thunkname{fcnNum}='int32voidPtrint32Thunk';fcns.name{fcnNum}='MLPutInteger'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'int32'};fcnNum=fcnNum+1;
% extern int MLPutLongInteger ( MLINK mlp , long l ); 
fcns.thunkname{fcnNum}='int32voidPtrlongThunk';fcns.name{fcnNum}='MLPutLongInteger'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'long'};fcnNum=fcnNum+1;
% extern int MLPutInteger16 ( MLINK mlp , int h ); 
fcns.thunkname{fcnNum}='int32voidPtrint32Thunk';fcns.name{fcnNum}='MLPutInteger16'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'int32'};fcnNum=fcnNum+1;
% extern int MLPutInteger32 ( MLINK mlp , int i ); 
fcns.thunkname{fcnNum}='int32voidPtrint32Thunk';fcns.name{fcnNum}='MLPutInteger32'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'int32'};fcnNum=fcnNum+1;
% extern int MLPutInteger64 ( MLINK mlp , mlint64 w ); 
fcns.thunkname{fcnNum}='int32voidPtrint64Thunk';fcns.name{fcnNum}='MLPutInteger64'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'int64'};fcnNum=fcnNum+1;
% extern int MLPutInteger8 ( MLINK mlp , unsigned char i ); 
fcns.thunkname{fcnNum}='int32voidPtruint8Thunk';fcns.name{fcnNum}='MLPutInteger8'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'uint8'};fcnNum=fcnNum+1;
% extern int MLPutFloat ( MLINK mlp , double f ); 
fcns.thunkname{fcnNum}='int32voidPtrdoubleThunk';fcns.name{fcnNum}='MLPutFloat'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'double'};fcnNum=fcnNum+1;
% extern int MLPutDouble ( MLINK mlp , double d ); 
fcns.thunkname{fcnNum}='int32voidPtrdoubleThunk';fcns.name{fcnNum}='MLPutDouble'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'double'};fcnNum=fcnNum+1;
% extern int MLPutReal ( MLINK mlp , double d ); 
fcns.thunkname{fcnNum}='int32voidPtrdoubleThunk';fcns.name{fcnNum}='MLPutReal'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'double'};fcnNum=fcnNum+1;
% extern int MLPutLongDouble ( MLINK mlp , mlextended_double x ); 
fcns.thunkname{fcnNum}='int32voidPtrmlextended_doubleThunk';fcns.name{fcnNum}='MLPutLongDouble'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'error'};fcnNum=fcnNum+1;
% extern int MLPutReal32 ( MLINK mlp , double f ); 
fcns.thunkname{fcnNum}='int32voidPtrdoubleThunk';fcns.name{fcnNum}='MLPutReal32'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'double'};fcnNum=fcnNum+1;
% extern int MLPutReal64 ( MLINK mlp , double d ); 
fcns.thunkname{fcnNum}='int32voidPtrdoubleThunk';fcns.name{fcnNum}='MLPutReal64'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'double'};fcnNum=fcnNum+1;
% extern int MLPutReal128 ( MLINK mlp , mlextended_double x ); 
fcns.thunkname{fcnNum}='int32voidPtrmlextended_doubleThunk';fcns.name{fcnNum}='MLPutReal128'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'error'};fcnNum=fcnNum+1;
% extern int MLPut8BitCharacters ( MLINK mlp , long chars_left , const unsigned char * bytes , long nbytes ); 
fcns.thunkname{fcnNum}='int32voidPtrlongvoidPtrlongThunk';fcns.name{fcnNum}='MLPut8BitCharacters'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'long', 'uint8Ptr', 'long'};fcnNum=fcnNum+1;
% extern int MLPut7BitCount ( MLINK mlp , long count , long size ); 
fcns.thunkname{fcnNum}='int32voidPtrlonglongThunk';fcns.name{fcnNum}='MLPut7BitCount'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'long', 'long'};fcnNum=fcnNum+1;
% extern int MLPut7BitCharacters ( MLINK mlp , long chars_left , const char * bytes , long nbytes , long nchars_now ); 
fcns.thunkname{fcnNum}='int32voidPtrlongcstringlonglongThunk';fcns.name{fcnNum}='MLPut7BitCharacters'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'long', 'cstring', 'long', 'long'};fcnNum=fcnNum+1;
% extern int MLPutUCS2Characters ( MLINK mlp , int chars_left , const unsigned short * codes , int ncodes ); 
fcns.thunkname{fcnNum}='int32voidPtrint32voidPtrint32Thunk';fcns.name{fcnNum}='MLPutUCS2Characters'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'int32', 'uint16Ptr', 'int32'};fcnNum=fcnNum+1;
% extern int MLPutUTF8Characters ( MLINK mlp , int chars_left , const unsigned char * codes , int ncodes ); 
fcns.thunkname{fcnNum}='int32voidPtrint32voidPtrint32Thunk';fcns.name{fcnNum}='MLPutUTF8Characters'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'int32', 'uint8Ptr', 'int32'};fcnNum=fcnNum+1;
% extern int MLPutUTF16Characters ( MLINK mlp , int chars_left , const unsigned short * codes , int ncodes ); 
fcns.thunkname{fcnNum}='int32voidPtrint32voidPtrint32Thunk';fcns.name{fcnNum}='MLPutUTF16Characters'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'int32', 'uint16Ptr', 'int32'};fcnNum=fcnNum+1;
% extern int MLPutUTF32Characters ( MLINK mlp , int chars_left , const unsigned int * codes , int ncodes ); 
fcns.thunkname{fcnNum}='int32voidPtrint32voidPtrint32Thunk';fcns.name{fcnNum}='MLPutUTF32Characters'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'int32', 'uint32Ptr', 'int32'};fcnNum=fcnNum+1;
% extern int MLPutByteString ( MLINK mlp , const unsigned char * s , long len ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrlongThunk';fcns.name{fcnNum}='MLPutByteString'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'uint8Ptr', 'long'};fcnNum=fcnNum+1;
% extern int MLPutString ( MLINK mlp , const char * s ); 
fcns.thunkname{fcnNum}='int32voidPtrcstringThunk';fcns.name{fcnNum}='MLPutString'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'cstring'};fcnNum=fcnNum+1;
% extern int MLPutUCS2String ( MLINK mlp , const unsigned short * s , int len ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='MLPutUCS2String'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'uint16Ptr', 'int32'};fcnNum=fcnNum+1;
% extern int MLPutUTF8String ( MLINK mlp , const unsigned char * s , int len ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='MLPutUTF8String'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'uint8Ptr', 'int32'};fcnNum=fcnNum+1;
% extern int MLPutUTF16String ( MLINK mlp , const unsigned short * s , int len ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='MLPutUTF16String'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'uint16Ptr', 'int32'};fcnNum=fcnNum+1;
% extern int MLPutUTF32String ( MLINK mlp , const unsigned int * s , int len ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='MLPutUTF32String'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'uint32Ptr', 'int32'};fcnNum=fcnNum+1;
% extern int MLPutRealNumberAsString ( MLINK mlp , const char * s ); 
fcns.thunkname{fcnNum}='int32voidPtrcstringThunk';fcns.name{fcnNum}='MLPutRealNumberAsString'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'cstring'};fcnNum=fcnNum+1;
% extern int MLPutRealNumberAsByteString ( MLINK mlp , const unsigned char * s ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='MLPutRealNumberAsByteString'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'uint8Ptr'};fcnNum=fcnNum+1;
% extern int MLPutRealNumberAsUCS2String ( MLINK mlp , const unsigned short * s ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='MLPutRealNumberAsUCS2String'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'uint16Ptr'};fcnNum=fcnNum+1;
% extern int MLPutRealNumberAsUTF8String ( MLINK mlp , const unsigned char * s , int nbytes ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='MLPutRealNumberAsUTF8String'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'uint8Ptr', 'int32'};fcnNum=fcnNum+1;
% extern int MLPutRealNumberAsUTF16String ( MLINK mlp , const unsigned short * s , int ncodes ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='MLPutRealNumberAsUTF16String'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'uint16Ptr', 'int32'};fcnNum=fcnNum+1;
% extern int MLPutRealNumberAsUTF32String ( MLINK mlp , const unsigned int * s , int nchars ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='MLPutRealNumberAsUTF32String'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'uint32Ptr', 'int32'};fcnNum=fcnNum+1;
% extern int MLPutSize ( MLINK mlp , int size ); 
fcns.thunkname{fcnNum}='int32voidPtrint32Thunk';fcns.name{fcnNum}='MLPutSize'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'int32'};fcnNum=fcnNum+1;
% extern int MLPutData ( MLINK mlp , const char * buff , int len ); 
fcns.thunkname{fcnNum}='int32voidPtrcstringint32Thunk';fcns.name{fcnNum}='MLPutData'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'cstring', 'int32'};fcnNum=fcnNum+1;
% extern int MLPutByteSymbol ( MLINK mlp , const unsigned char * s , long len ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrlongThunk';fcns.name{fcnNum}='MLPutByteSymbol'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'uint8Ptr', 'long'};fcnNum=fcnNum+1;
% extern int MLPutSymbol ( MLINK mlp , const char * s ); 
fcns.thunkname{fcnNum}='int32voidPtrcstringThunk';fcns.name{fcnNum}='MLPutSymbol'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'cstring'};fcnNum=fcnNum+1;
% extern int MLPutUCS2Symbol ( MLINK mlp , const unsigned short * s , int len ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='MLPutUCS2Symbol'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'uint16Ptr', 'int32'};fcnNum=fcnNum+1;
% extern int MLPutUTF8Symbol ( MLINK mlp , const unsigned char * s , int len ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='MLPutUTF8Symbol'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'uint8Ptr', 'int32'};fcnNum=fcnNum+1;
% extern int MLPutUTF16Symbol ( MLINK mlp , const unsigned short * s , int len ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='MLPutUTF16Symbol'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'uint16Ptr', 'int32'};fcnNum=fcnNum+1;
% extern int MLPutUTF32Symbol ( MLINK mlp , const unsigned int * s , int len ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='MLPutUTF32Symbol'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'uint32Ptr', 'int32'};fcnNum=fcnNum+1;
% extern int MLPutFunction ( MLINK mlp , const char * s , int argc ); 
fcns.thunkname{fcnNum}='int32voidPtrcstringint32Thunk';fcns.name{fcnNum}='MLPutFunction'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'cstring', 'int32'};fcnNum=fcnNum+1;
% extern int MLPutUCS2Function ( MLINK mlp , const unsigned short * s , int length , int argn ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrint32int32Thunk';fcns.name{fcnNum}='MLPutUCS2Function'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'uint16Ptr', 'int32', 'int32'};fcnNum=fcnNum+1;
% extern int MLPutUTF8Function ( MLINK mlp , const unsigned char * s , int length , int argn ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrint32int32Thunk';fcns.name{fcnNum}='MLPutUTF8Function'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'uint8Ptr', 'int32', 'int32'};fcnNum=fcnNum+1;
% extern int MLPutUTF16Function ( MLINK mlp , const unsigned short * s , int length , int argn ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrint32int32Thunk';fcns.name{fcnNum}='MLPutUTF16Function'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'uint16Ptr', 'int32', 'int32'};fcnNum=fcnNum+1;
% extern int MLPutUTF32Function ( MLINK mlp , const unsigned int * s , int length , int argn ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrint32int32Thunk';fcns.name{fcnNum}='MLPutUTF32Function'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'uint32Ptr', 'int32', 'int32'};fcnNum=fcnNum+1;
% extern long MLCharacterOffset ( const char ** startp , const char * end , long n ); 
fcns.thunkname{fcnNum}='longvoidPtrcstringlongThunk';fcns.name{fcnNum}='MLCharacterOffset'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'stringPtrPtr', 'cstring', 'long'};fcnNum=fcnNum+1;
% extern long MLStringCharacter ( const char * start , const char * end ); 
fcns.thunkname{fcnNum}='longcstringcstringThunk';fcns.name{fcnNum}='MLStringCharacter'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'cstring'};fcnNum=fcnNum+1;
% extern long MLNextCharacter ( const char ** startp , const char * end ); 
fcns.thunkname{fcnNum}='longvoidPtrcstringThunk';fcns.name{fcnNum}='MLNextCharacter'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'stringPtrPtr', 'cstring'};fcnNum=fcnNum+1;
% extern long MLNextCharacterFromStringWithLength ( const char * str , long * indexp , long len ); 
fcns.thunkname{fcnNum}='longcstringvoidPtrlongThunk';fcns.name{fcnNum}='MLNextCharacterFromStringWithLength'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'longPtr', 'long'};fcnNum=fcnNum+1;
% extern long MLConvertNewLine ( char ** sp ); 
fcns.thunkname{fcnNum}='longvoidPtrThunk';fcns.name{fcnNum}='MLConvertNewLine'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'stringPtrPtr'};fcnNum=fcnNum+1;
% extern long MLConvertCharacter ( unsigned long ch , char ** sp ); 
fcns.thunkname{fcnNum}='longulongvoidPtrThunk';fcns.name{fcnNum}='MLConvertCharacter'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'stringPtrPtr'};fcnNum=fcnNum+1;
% extern long MLConvertByteString ( unsigned char * codes , long len , char ** strp , char * str_end ); 
fcns.thunkname{fcnNum}='longvoidPtrlongvoidPtrcstringThunk';fcns.name{fcnNum}='MLConvertByteString'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint8Ptr', 'long', 'stringPtrPtr', 'cstring'};fcnNum=fcnNum+1;
% extern long MLConvertByteStringNL ( unsigned char * codes , long len , char ** strp , char * str_end , unsigned long nl ); 
fcns.thunkname{fcnNum}='longvoidPtrlongvoidPtrcstringulongThunk';fcns.name{fcnNum}='MLConvertByteStringNL'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint8Ptr', 'long', 'stringPtrPtr', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% extern long MLConvertDoubleByteString ( unsigned char * codes , long len , char ** strp , char * str_end ); 
fcns.thunkname{fcnNum}='longvoidPtrlongvoidPtrcstringThunk';fcns.name{fcnNum}='MLConvertDoubleByteString'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint8Ptr', 'long', 'stringPtrPtr', 'cstring'};fcnNum=fcnNum+1;
% extern long MLConvertDoubleByteStringNL ( unsigned char * codes , long len , char ** strp , char * str_end , unsigned long nl ); 
fcns.thunkname{fcnNum}='longvoidPtrlongvoidPtrcstringulongThunk';fcns.name{fcnNum}='MLConvertDoubleByteStringNL'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint8Ptr', 'long', 'stringPtrPtr', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% extern long MLConvertUCS2String ( unsigned short * codes , long len , char ** strp , char * str_end ); 
fcns.thunkname{fcnNum}='longvoidPtrlongvoidPtrcstringThunk';fcns.name{fcnNum}='MLConvertUCS2String'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint16Ptr', 'long', 'stringPtrPtr', 'cstring'};fcnNum=fcnNum+1;
% extern long MLConvertUCS2StringNL ( unsigned short * codes , long len , char ** strp , char * str_end , unsigned long nl ); 
fcns.thunkname{fcnNum}='longvoidPtrlongvoidPtrcstringulongThunk';fcns.name{fcnNum}='MLConvertUCS2StringNL'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint16Ptr', 'long', 'stringPtrPtr', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% extern long MLConvertUTF8String ( unsigned char * codes , long len , char ** strp , char * str_end ); 
fcns.thunkname{fcnNum}='longvoidPtrlongvoidPtrcstringThunk';fcns.name{fcnNum}='MLConvertUTF8String'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint8Ptr', 'long', 'stringPtrPtr', 'cstring'};fcnNum=fcnNum+1;
% extern long MLConvertUTF8StringNL ( unsigned char * codes , long len , char ** strp , char * str_end , unsigned long nl ); 
fcns.thunkname{fcnNum}='longvoidPtrlongvoidPtrcstringulongThunk';fcns.name{fcnNum}='MLConvertUTF8StringNL'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint8Ptr', 'long', 'stringPtrPtr', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% extern long MLConvertUTF16String ( unsigned short * codes , long len , char ** strp , char * str_end ); 
fcns.thunkname{fcnNum}='longvoidPtrlongvoidPtrcstringThunk';fcns.name{fcnNum}='MLConvertUTF16String'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint16Ptr', 'long', 'stringPtrPtr', 'cstring'};fcnNum=fcnNum+1;
% extern long MLConvertUTF16StringNL ( unsigned short * codes , long len , char ** strp , char * str_end , unsigned long nl ); 
fcns.thunkname{fcnNum}='longvoidPtrlongvoidPtrcstringulongThunk';fcns.name{fcnNum}='MLConvertUTF16StringNL'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint16Ptr', 'long', 'stringPtrPtr', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% extern long MLConvertUTF32String ( unsigned int * codes , long len , char ** strp , char * str_end ); 
fcns.thunkname{fcnNum}='longvoidPtrlongvoidPtrcstringThunk';fcns.name{fcnNum}='MLConvertUTF32String'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint32Ptr', 'long', 'stringPtrPtr', 'cstring'};fcnNum=fcnNum+1;
% extern long MLConvertUTF32StringNL ( unsigned int * codes , long len , char ** strp , char * str_end , unsigned long nl ); 
fcns.thunkname{fcnNum}='longvoidPtrlongvoidPtrcstringulongThunk';fcns.name{fcnNum}='MLConvertUTF32StringNL'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint32Ptr', 'long', 'stringPtrPtr', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% extern const char * MLStringFirstPosFun ( const char * s , MLStringPositionPointer p ); 
fcns.thunkname{fcnNum}='cstringcstringvoidPtrThunk';fcns.name{fcnNum}='MLStringFirstPosFun'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}={'cstring', 'MLStringPositionPtr'};fcnNum=fcnNum+1;
% extern int MLOldPutCharToString ( unsigned int ch , char ** sp ); 
fcns.thunkname{fcnNum}='int32uint32voidPtrThunk';fcns.name{fcnNum}='MLOldPutCharToString'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 'stringPtrPtr'};fcnNum=fcnNum+1;
% extern unsigned char * MLOldStringNextPosFun ( MLOldStringPositionPointer p ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrThunk';fcns.name{fcnNum}='MLOldStringNextPosFun'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint8Ptr'; fcns.RHS{fcnNum}={'MLOldStringPositionPtr'};fcnNum=fcnNum+1;
% extern unsigned char * MLOldStringFirstPosFun ( char * s , MLOldStringPositionPointer p ); 
fcns.thunkname{fcnNum}='voidPtrcstringvoidPtrThunk';fcns.name{fcnNum}='MLOldStringFirstPosFun'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint8Ptr'; fcns.RHS{fcnNum}={'cstring', 'MLOldStringPositionPtr'};fcnNum=fcnNum+1;
% extern unsigned int MLOldStringCharFun ( MLOldStringPositionPointer p ); 
fcns.thunkname{fcnNum}='uint32voidPtrThunk';fcns.name{fcnNum}='MLOldStringCharFun'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'MLOldStringPositionPtr'};fcnNum=fcnNum+1;
% extern long MLOldConvertByteString ( unsigned char * codes , long len , char ** strp , char * str_end ); 
fcns.thunkname{fcnNum}='longvoidPtrlongvoidPtrcstringThunk';fcns.name{fcnNum}='MLOldConvertByteString'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint8Ptr', 'long', 'stringPtrPtr', 'cstring'};fcnNum=fcnNum+1;
% extern long MLOldConvertUCS2String ( unsigned short * codes , long len , char ** strp , char * str_end ); 
fcns.thunkname{fcnNum}='longvoidPtrlongvoidPtrcstringThunk';fcns.name{fcnNum}='MLOldConvertUCS2String'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint16Ptr', 'long', 'stringPtrPtr', 'cstring'};fcnNum=fcnNum+1;
% extern int MLPutArray ( MLINK mlp , array_meterp meterp ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='MLPutArray'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'array_meterPtr'};fcnNum=fcnNum+1;
% extern int MLPutBinaryNumberArrayData ( MLINK mlp , array_meterp meterp , const void * datap , long count , long type ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrlonglongThunk';fcns.name{fcnNum}='MLPutBinaryNumberArrayData'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'array_meterPtr', 'voidPtr', 'long', 'long'};fcnNum=fcnNum+1;
% extern int MLPutByteArrayData ( MLINK mlp , array_meterp meterp , const unsigned char * datap , long count ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrlongThunk';fcns.name{fcnNum}='MLPutByteArrayData'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'array_meterPtr', 'uint8Ptr', 'long'};fcnNum=fcnNum+1;
% extern int MLPutShortIntegerArrayData ( MLINK mlp , array_meterp meterp , const short * datap , long count ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrlongThunk';fcns.name{fcnNum}='MLPutShortIntegerArrayData'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'array_meterPtr', 'int16Ptr', 'long'};fcnNum=fcnNum+1;
% extern int MLPutIntegerArrayData ( MLINK mlp , array_meterp meterp , const int * datap , long count ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrlongThunk';fcns.name{fcnNum}='MLPutIntegerArrayData'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'array_meterPtr', 'int32Ptr', 'long'};fcnNum=fcnNum+1;
% extern int MLPutLongIntegerArrayData ( MLINK mlp , array_meterp meterp , const long * datap , long count ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrlongThunk';fcns.name{fcnNum}='MLPutLongIntegerArrayData'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'array_meterPtr', 'longPtr', 'long'};fcnNum=fcnNum+1;
% extern int MLPutInteger8ArrayData ( MLINK mlp , array_meterp meterp , const unsigned char * datap , int count ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='MLPutInteger8ArrayData'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'array_meterPtr', 'uint8Ptr', 'int32'};fcnNum=fcnNum+1;
% extern int MLPutInteger16ArrayData ( MLINK mlp , array_meterp meterp , const short * datap , int count ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='MLPutInteger16ArrayData'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'array_meterPtr', 'int16Ptr', 'int32'};fcnNum=fcnNum+1;
% extern int MLPutInteger32ArrayData ( MLINK mlp , array_meterp meterp , const int * datap , int count ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='MLPutInteger32ArrayData'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'array_meterPtr', 'int32Ptr', 'int32'};fcnNum=fcnNum+1;
% extern int MLPutInteger64ArrayData ( MLINK mlp , array_meterp meterp , const mlint64 * datap , int count ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='MLPutInteger64ArrayData'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'array_meterPtr', 'int64Ptr', 'int32'};fcnNum=fcnNum+1;
% extern int MLPutFloatArrayData ( MLINK mlp , array_meterp meterp , const float * datap , long count ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrlongThunk';fcns.name{fcnNum}='MLPutFloatArrayData'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'array_meterPtr', 'singlePtr', 'long'};fcnNum=fcnNum+1;
% extern int MLPutDoubleArrayData ( MLINK mlp , array_meterp meterp , const double * datap , long count ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrlongThunk';fcns.name{fcnNum}='MLPutDoubleArrayData'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'array_meterPtr', 'doublePtr', 'long'};fcnNum=fcnNum+1;
% extern int MLPutLongDoubleArrayData ( MLINK mlp , array_meterp meterp , const mlextended_double * datap , long count ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrlongThunk';fcns.name{fcnNum}='MLPutLongDoubleArrayData'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'array_meterPtr', 'errorPtr', 'long'};fcnNum=fcnNum+1;
% extern int MLPutReal32ArrayData ( MLINK mlp , array_meterp meterp , const float * datap , int count ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='MLPutReal32ArrayData'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'array_meterPtr', 'singlePtr', 'int32'};fcnNum=fcnNum+1;
% extern int MLPutReal64ArrayData ( MLINK mlp , array_meterp meterp , const double * datap , int count ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='MLPutReal64ArrayData'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'array_meterPtr', 'doublePtr', 'int32'};fcnNum=fcnNum+1;
% extern int MLPutReal128ArrayData ( MLINK mlp , array_meterp meterp , const mlextended_double * datap , int count ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='MLPutReal128ArrayData'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'array_meterPtr', 'errorPtr', 'int32'};fcnNum=fcnNum+1;
% extern int MLPutBinaryNumberArray ( MLINK mlp , const void * data , const long * dimp , const char ** heads , long depth , long type ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrvoidPtrlonglongThunk';fcns.name{fcnNum}='MLPutBinaryNumberArray'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'voidPtr', 'longPtr', 'stringPtrPtr', 'long', 'long'};fcnNum=fcnNum+1;
% extern int MLPutByteArray ( MLINK mlp , const unsigned char * data , const int * dims , const char ** heads , int depth ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='MLPutByteArray'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'uint8Ptr', 'int32Ptr', 'stringPtrPtr', 'int32'};fcnNum=fcnNum+1;
% extern int MLPutShortIntegerArray ( MLINK mlp , const short * data , const long * dims , const char ** heads , long depth ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrvoidPtrlongThunk';fcns.name{fcnNum}='MLPutShortIntegerArray'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'int16Ptr', 'longPtr', 'stringPtrPtr', 'long'};fcnNum=fcnNum+1;
% extern int MLPutIntegerArray ( MLINK mlp , const int * data , const long * dims , const char ** heads , long depth ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrvoidPtrlongThunk';fcns.name{fcnNum}='MLPutIntegerArray'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'int32Ptr', 'longPtr', 'stringPtrPtr', 'long'};fcnNum=fcnNum+1;
% extern int MLPutLongIntegerArray ( MLINK mlp , const long * data , const long * dims , const char ** heads , long depth ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrvoidPtrlongThunk';fcns.name{fcnNum}='MLPutLongIntegerArray'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'longPtr', 'longPtr', 'stringPtrPtr', 'long'};fcnNum=fcnNum+1;
% extern int MLPutInteger8Array ( MLINK mlp , const unsigned char * data , const int * dims , const char ** heads , int depth ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='MLPutInteger8Array'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'uint8Ptr', 'int32Ptr', 'stringPtrPtr', 'int32'};fcnNum=fcnNum+1;
% extern int MLPutInteger16Array ( MLINK mlp , const short * data , const int * dims , const char ** heads , int depth ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='MLPutInteger16Array'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'int16Ptr', 'int32Ptr', 'stringPtrPtr', 'int32'};fcnNum=fcnNum+1;
% extern int MLPutInteger32Array ( MLINK mlp , const int * data , const int * dims , const char ** heads , int depth ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='MLPutInteger32Array'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'int32Ptr', 'int32Ptr', 'stringPtrPtr', 'int32'};fcnNum=fcnNum+1;
% extern int MLPutInteger64Array ( MLINK mlp , const mlint64 * data , const int * dims , const char ** heads , int depth ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='MLPutInteger64Array'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'int64Ptr', 'int32Ptr', 'stringPtrPtr', 'int32'};fcnNum=fcnNum+1;
% extern int MLPutFloatArray ( MLINK mlp , const float * data , const long * dims , const char ** heads , long depth ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrvoidPtrlongThunk';fcns.name{fcnNum}='MLPutFloatArray'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'singlePtr', 'longPtr', 'stringPtrPtr', 'long'};fcnNum=fcnNum+1;
% extern int MLPutDoubleArray ( MLINK mlp , const double * data , const long * dims , const char ** heads , long depth ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrvoidPtrlongThunk';fcns.name{fcnNum}='MLPutDoubleArray'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'doublePtr', 'longPtr', 'stringPtrPtr', 'long'};fcnNum=fcnNum+1;
% extern int MLPutRealArray ( MLINK mlp , const double * data , const long * dims , const char ** heads , long depth ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrvoidPtrlongThunk';fcns.name{fcnNum}='MLPutRealArray'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'doublePtr', 'longPtr', 'stringPtrPtr', 'long'};fcnNum=fcnNum+1;
% extern int MLPutLongDoubleArray ( MLINK mlp , const mlextended_double * data , const long * dims , const char ** heads , long depth ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrvoidPtrlongThunk';fcns.name{fcnNum}='MLPutLongDoubleArray'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'errorPtr', 'longPtr', 'stringPtrPtr', 'long'};fcnNum=fcnNum+1;
% extern int MLPutReal32Array ( MLINK mlp , const float * data , const int * dims , const char ** heads , int depth ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='MLPutReal32Array'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'singlePtr', 'int32Ptr', 'stringPtrPtr', 'int32'};fcnNum=fcnNum+1;
% extern int MLPutReal64Array ( MLINK mlp , const double * data , const int * dims , const char ** heads , int depth ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='MLPutReal64Array'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'doublePtr', 'int32Ptr', 'stringPtrPtr', 'int32'};fcnNum=fcnNum+1;
% extern int MLPutReal128Array ( MLINK mlp , const mlextended_double * data , const int * dims , const char ** heads , int depth ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='MLPutReal128Array'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'errorPtr', 'int32Ptr', 'stringPtrPtr', 'int32'};fcnNum=fcnNum+1;
% extern int MLPutBinaryNumberList ( MLINK mlp , const void * data , long count , long type ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrlonglongThunk';fcns.name{fcnNum}='MLPutBinaryNumberList'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'voidPtr', 'long', 'long'};fcnNum=fcnNum+1;
% extern int MLPutIntegerList ( MLINK mlp , const int * data , long count ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrlongThunk';fcns.name{fcnNum}='MLPutIntegerList'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'int32Ptr', 'long'};fcnNum=fcnNum+1;
% extern int MLPutRealList ( MLINK mlp , const double * data , long count ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrlongThunk';fcns.name{fcnNum}='MLPutRealList'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'doublePtr', 'long'};fcnNum=fcnNum+1;
% extern int MLPutInteger8List ( MLINK mlp , const unsigned char * data , int count ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='MLPutInteger8List'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'uint8Ptr', 'int32'};fcnNum=fcnNum+1;
% extern int MLPutInteger16List ( MLINK mlp , const short * data , int count ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='MLPutInteger16List'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'int16Ptr', 'int32'};fcnNum=fcnNum+1;
% extern int MLPutInteger32List ( MLINK mlp , const int * data , int count ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='MLPutInteger32List'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'int32Ptr', 'int32'};fcnNum=fcnNum+1;
% extern int MLPutInteger64List ( MLINK mlp , const mlint64 * data , int count ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='MLPutInteger64List'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'int64Ptr', 'int32'};fcnNum=fcnNum+1;
% extern int MLPutReal32List ( MLINK mlp , const float * data , int count ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='MLPutReal32List'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'singlePtr', 'int32'};fcnNum=fcnNum+1;
% extern int MLPutReal64List ( MLINK mlp , const double * data , int count ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='MLPutReal64List'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'doublePtr', 'int32'};fcnNum=fcnNum+1;
% extern int MLPutReal128List ( MLINK mlp , const mlextended_double * data , int count ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='MLPutReal128List'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'errorPtr', 'int32'};fcnNum=fcnNum+1;
% extern int MLPutArrayType ( MLINK mlp , MLINK heads , long depth , array_meterpp meterpp ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrlongvoidPtrThunk';fcns.name{fcnNum}='MLPutArrayType'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'MLinkPtr', 'long', 'array_meterPtrPtr'};fcnNum=fcnNum+1;
% extern int MLReleasePutArrayState ( MLINK mlp , MLINK heads , array_meterp meterp ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='MLReleasePutArrayState'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'MLinkPtr', 'array_meterPtr'};fcnNum=fcnNum+1;
% extern int MLPutArrayLeaves ( MLINK mlp , MLINK heads , array_meterp meterp , MLINK leaves , long count ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrvoidPtrlongThunk';fcns.name{fcnNum}='MLPutArrayLeaves'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'MLinkPtr', 'array_meterPtr', 'MLinkPtr', 'long'};fcnNum=fcnNum+1;
% extern int MLPutBinaryNumberArrayDataWithHeads ( MLINK mlp , MLINK heads , array_meterp meterp , const void * datap , long count , long type ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrvoidPtrlonglongThunk';fcns.name{fcnNum}='MLPutBinaryNumberArrayDataWithHeads'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'MLinkPtr', 'array_meterPtr', 'voidPtr', 'long', 'long'};fcnNum=fcnNum+1;
% extern int MLGetArrayDimensions ( MLINK mlp , array_meterp meterp ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='MLGetArrayDimensions'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'array_meterPtr'};fcnNum=fcnNum+1;
% extern int MLGetArrayType ( MLINK mlp , array_meterp meterp ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='MLGetArrayType'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'array_meterPtr'};fcnNum=fcnNum+1;
% extern int MLGetBinaryNumberList ( MLINK mlp , void ** datap , long * countp , long type ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrlongThunk';fcns.name{fcnNum}='MLGetBinaryNumberList'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'voidPtrPtr', 'longPtr', 'long'};fcnNum=fcnNum+1;
% extern int MLGetIntegerList ( MLINK mlp , int ** datap , long * countp ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='MLGetIntegerList'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'int32PtrPtr', 'longPtr'};fcnNum=fcnNum+1;
% extern int MLGetRealList ( MLINK mlp , double ** datap , long * countp ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='MLGetRealList'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'doublePtrPtr', 'longPtr'};fcnNum=fcnNum+1;
% extern int MLGetInteger16List ( MLINK mlp , short ** datap , int * countp ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='MLGetInteger16List'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'int16PtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
% extern int MLGetInteger32List ( MLINK mlp , int ** datap , int * countp ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='MLGetInteger32List'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'int32PtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
% extern int MLGetInteger64List ( MLINK mlp , mlint64 ** datap , int * countp ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='MLGetInteger64List'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'int64PtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
% extern int MLGetReal32List ( MLINK mlp , float ** datap , int * countp ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='MLGetReal32List'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'singlePtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
% extern int MLGetReal64List ( MLINK mlp , double ** datap , int * countp ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='MLGetReal64List'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'doublePtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
% extern int MLGetReal128List ( MLINK mlp , mlextended_double ** datap , int * countp ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='MLGetReal128List'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'errorPtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
% extern void MLReleaseIntegerList ( MLINK mlp , int * data , long count ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrlongThunk';fcns.name{fcnNum}='MLReleaseIntegerList'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'MLinkPtr', 'int32Ptr', 'long'};fcnNum=fcnNum+1;
% extern void MLReleaseRealList ( MLINK mlp , double * data , long count ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrlongThunk';fcns.name{fcnNum}='MLReleaseRealList'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'MLinkPtr', 'doublePtr', 'long'};fcnNum=fcnNum+1;
% extern void MLReleaseBinaryNumberList ( MLINK mlp , void * data , int count , long type ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrint32longThunk';fcns.name{fcnNum}='MLReleaseBinaryNumberList'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'MLinkPtr', 'voidPtr', 'int32', 'long'};fcnNum=fcnNum+1;
% extern void MLReleaseInteger16List ( MLINK mlp , short * data , int count ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='MLReleaseInteger16List'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'MLinkPtr', 'int16Ptr', 'int32'};fcnNum=fcnNum+1;
% extern void MLReleaseInteger32List ( MLINK mlp , int * data , int count ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='MLReleaseInteger32List'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'MLinkPtr', 'int32Ptr', 'int32'};fcnNum=fcnNum+1;
% extern void MLReleaseInteger64List ( MLINK mlp , mlint64 * data , int count ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='MLReleaseInteger64List'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'MLinkPtr', 'int64Ptr', 'int32'};fcnNum=fcnNum+1;
% extern void MLReleaseReal32List ( MLINK mlp , float * data , int count ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='MLReleaseReal32List'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'MLinkPtr', 'singlePtr', 'int32'};fcnNum=fcnNum+1;
% extern void MLReleaseReal64List ( MLINK mlp , double * data , int count ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='MLReleaseReal64List'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'MLinkPtr', 'doublePtr', 'int32'};fcnNum=fcnNum+1;
% extern void MLReleaseReal128List ( MLINK mlp , mlextended_double * data , int count ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='MLReleaseReal128List'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'MLinkPtr', 'errorPtr', 'int32'};fcnNum=fcnNum+1;
% extern int MLGetBinaryNumberArrayData ( MLINK mlp , array_meterp meterp , void * datap , long count , long type ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrlonglongThunk';fcns.name{fcnNum}='MLGetBinaryNumberArrayData'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'array_meterPtr', 'voidPtr', 'long', 'long'};fcnNum=fcnNum+1;
% extern int MLGetByteArrayData ( MLINK mlp , array_meterp meterp , unsigned char * datap , long count ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrlongThunk';fcns.name{fcnNum}='MLGetByteArrayData'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'array_meterPtr', 'uint8Ptr', 'long'};fcnNum=fcnNum+1;
% extern int MLGetShortIntegerArrayData ( MLINK mlp , array_meterp meterp , short * datap , long count ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrlongThunk';fcns.name{fcnNum}='MLGetShortIntegerArrayData'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'array_meterPtr', 'int16Ptr', 'long'};fcnNum=fcnNum+1;
% extern int MLGetIntegerArrayData ( MLINK mlp , array_meterp meterp , int * datap , long count ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrlongThunk';fcns.name{fcnNum}='MLGetIntegerArrayData'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'array_meterPtr', 'int32Ptr', 'long'};fcnNum=fcnNum+1;
% extern int MLGetLongIntegerArrayData ( MLINK mlp , array_meterp meterp , long * datap , long count ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrlongThunk';fcns.name{fcnNum}='MLGetLongIntegerArrayData'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'array_meterPtr', 'longPtr', 'long'};fcnNum=fcnNum+1;
% extern int MLGetInteger16ArrayData ( MLINK mlp , array_meterp meterp , short * datap , int count ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='MLGetInteger16ArrayData'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'array_meterPtr', 'int16Ptr', 'int32'};fcnNum=fcnNum+1;
% extern int MLGetInteger32ArrayData ( MLINK mlp , array_meterp meterp , int * datap , int count ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='MLGetInteger32ArrayData'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'array_meterPtr', 'int32Ptr', 'int32'};fcnNum=fcnNum+1;
% extern int MLGetInteger64ArrayData ( MLINK mlp , array_meterp meterp , mlint64 * datap , int count ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='MLGetInteger64ArrayData'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'array_meterPtr', 'int64Ptr', 'int32'};fcnNum=fcnNum+1;
% extern int MLGetFloatArrayData ( MLINK mlp , array_meterp meterp , float * datap , long count ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrlongThunk';fcns.name{fcnNum}='MLGetFloatArrayData'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'array_meterPtr', 'singlePtr', 'long'};fcnNum=fcnNum+1;
% extern int MLGetDoubleArrayData ( MLINK mlp , array_meterp meterp , double * datap , long count ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrlongThunk';fcns.name{fcnNum}='MLGetDoubleArrayData'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'array_meterPtr', 'doublePtr', 'long'};fcnNum=fcnNum+1;
% extern int MLGetLongDoubleArrayData ( MLINK mlp , array_meterp meterp , mlextended_double * datap , long count ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrlongThunk';fcns.name{fcnNum}='MLGetLongDoubleArrayData'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'array_meterPtr', 'errorPtr', 'long'};fcnNum=fcnNum+1;
% extern int MLGetReal32ArrayData ( MLINK mlp , array_meterp meterp , float * datap , int count ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='MLGetReal32ArrayData'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'array_meterPtr', 'singlePtr', 'int32'};fcnNum=fcnNum+1;
% extern int MLGetReal64ArrayData ( MLINK mlp , array_meterp meterp , double * datap , int count ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='MLGetReal64ArrayData'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'array_meterPtr', 'doublePtr', 'int32'};fcnNum=fcnNum+1;
% extern int MLGetReal128ArrayData ( MLINK mlp , array_meterp meterp , mlextended_double * datap , int count ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='MLGetReal128ArrayData'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'array_meterPtr', 'errorPtr', 'int32'};fcnNum=fcnNum+1;
% extern int MLGetInteger8List ( MLINK mlp , unsigned char ** datap , int * countp ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='MLGetInteger8List'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'uint8PtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
% extern int MLGetInteger8ArrayData ( MLINK mlp , array_meterp meterp , unsigned char * datap , int count ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='MLGetInteger8ArrayData'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'array_meterPtr', 'uint8Ptr', 'int32'};fcnNum=fcnNum+1;
% extern void MLReleaseInteger8List ( MLINK mlp , unsigned char * data , int count ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='MLReleaseInteger8List'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'MLinkPtr', 'uint8Ptr', 'int32'};fcnNum=fcnNum+1;
% extern int MLGetArrayTypeWithDepthAndLeafType ( MLINK mlp , MLINK heads , array_meterpp meterpp , long * depthp , mlapi__token * leaf_tokp ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='MLGetArrayTypeWithDepthAndLeafType'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'MLinkPtr', 'array_meterPtrPtr', 'longPtr', 'ulongPtr'};fcnNum=fcnNum+1;
% extern int MLGetBinaryNumberArrayDataWithHeads ( MLINK mlp , MLINK heads , array_meterp meterp , void * datap , long * countp , long type ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrvoidPtrvoidPtrlongThunk';fcns.name{fcnNum}='MLGetBinaryNumberArrayDataWithHeads'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'MLinkPtr', 'array_meterPtr', 'voidPtr', 'longPtr', 'long'};fcnNum=fcnNum+1;
% extern void MLReleaseGetArrayState ( MLINK mlp , MLINK heads , array_meterp meterp ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='MLReleaseGetArrayState'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'MLinkPtr', 'MLinkPtr', 'array_meterPtr'};fcnNum=fcnNum+1;
% extern int MLGetBinaryNumberArrayWithLeafType ( MLINK mlp , void ** datap , long ** dimpp , char *** headsp , long * depthp , long type , mlapi__token * leaf_tokp ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrvoidPtrvoidPtrlongvoidPtrThunk';fcns.name{fcnNum}='MLGetBinaryNumberArrayWithLeafType'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'voidPtrPtr', 'longPtrPtr', 'int8PtrPtrPtr', 'longPtr', 'long', 'ulongPtr'};fcnNum=fcnNum+1;
% extern int MLGetBinaryNumberArray ( MLINK mlp , void ** datap , long ** dimpp , char *** headsp , long * depthp , long type ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrvoidPtrvoidPtrlongThunk';fcns.name{fcnNum}='MLGetBinaryNumberArray'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'voidPtrPtr', 'longPtrPtr', 'int8PtrPtrPtr', 'longPtr', 'long'};fcnNum=fcnNum+1;
% extern int MLGetByteArray ( MLINK mlp , unsigned char ** datap , int ** dimsp , char *** headsp , int * depthp ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='MLGetByteArray'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'uint8PtrPtr', 'int32PtrPtr', 'int8PtrPtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
% extern int MLGetShortIntegerArray ( MLINK mlp , short ** datap , long ** dimsp , char *** headsp , long * depthp ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='MLGetShortIntegerArray'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'int16PtrPtr', 'longPtrPtr', 'int8PtrPtrPtr', 'longPtr'};fcnNum=fcnNum+1;
% extern int MLGetIntegerArray ( MLINK mlp , int ** datap , long ** dimsp , char *** headsp , long * depthp ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='MLGetIntegerArray'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'int32PtrPtr', 'longPtrPtr', 'int8PtrPtrPtr', 'longPtr'};fcnNum=fcnNum+1;
% extern int MLGetLongIntegerArray ( MLINK mlp , long ** datap , long ** dimsp , char *** headsp , long * depthp ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='MLGetLongIntegerArray'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'longPtrPtr', 'longPtrPtr', 'int8PtrPtrPtr', 'longPtr'};fcnNum=fcnNum+1;
% extern int MLGetInteger16Array ( MLINK mlp , short ** datap , int ** dimsp , char *** headsp , int * depthp ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='MLGetInteger16Array'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'int16PtrPtr', 'int32PtrPtr', 'int8PtrPtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
% extern int MLGetInteger32Array ( MLINK mlp , int ** datap , int ** dimsp , char *** headsp , int * depthp ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='MLGetInteger32Array'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'int32PtrPtr', 'int32PtrPtr', 'int8PtrPtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
% extern int MLGetInteger64Array ( MLINK mlp , mlint64 ** datap , int ** dimsp , char *** headsp , int * depthp ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='MLGetInteger64Array'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'int64PtrPtr', 'int32PtrPtr', 'int8PtrPtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
% extern int MLGetInteger8Array ( MLINK mlp , unsigned char ** datap , int ** dimsp , char *** headsp , int * depthp ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='MLGetInteger8Array'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'uint8PtrPtr', 'int32PtrPtr', 'int8PtrPtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
% extern int MLGetFloatArray ( MLINK mlp , float ** datap , long ** dimsp , char *** headsp , long * depthp ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='MLGetFloatArray'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'singlePtrPtr', 'longPtrPtr', 'int8PtrPtrPtr', 'longPtr'};fcnNum=fcnNum+1;
% extern int MLGetDoubleArray ( MLINK mlp , double ** datap , long ** dimsp , char *** headsp , long * depthp ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='MLGetDoubleArray'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'doublePtrPtr', 'longPtrPtr', 'int8PtrPtrPtr', 'longPtr'};fcnNum=fcnNum+1;
% extern int MLGetRealArray ( MLINK mlp , double ** datap , long ** dimsp , char *** headsp , long * depthp ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='MLGetRealArray'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'doublePtrPtr', 'longPtrPtr', 'int8PtrPtrPtr', 'longPtr'};fcnNum=fcnNum+1;
% extern int MLGetLongDoubleArray ( MLINK mlp , mlextended_double ** datap , long ** dimsp , char *** headsp , long * depthp ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='MLGetLongDoubleArray'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'errorPtrPtr', 'longPtrPtr', 'int8PtrPtrPtr', 'longPtr'};fcnNum=fcnNum+1;
% extern int MLGetReal32Array ( MLINK mlp , float ** datap , int ** dimsp , char *** headsp , int * depthp ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='MLGetReal32Array'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'singlePtrPtr', 'int32PtrPtr', 'int8PtrPtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
% extern int MLGetReal64Array ( MLINK mlp , double ** datap , int ** dimsp , char *** headsp , int * depthp ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='MLGetReal64Array'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'doublePtrPtr', 'int32PtrPtr', 'int64PtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
% extern int MLGetReal128Array ( MLINK mlp , mlextended_double ** datap , int ** dimsp , char *** headsp , int * depthp ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='MLGetReal128Array'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'errorPtrPtr', 'int32PtrPtr', 'int8PtrPtrPtr', 'int32Ptr'};fcnNum=fcnNum+1;
% extern void MLReleaseShortIntegerArray ( MLINK mlp , short * data , long * dims , char ** heads , long depth ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrvoidPtrlongThunk';fcns.name{fcnNum}='MLReleaseShortIntegerArray'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'MLinkPtr', 'int16Ptr', 'longPtr', 'stringPtrPtr', 'long'};fcnNum=fcnNum+1;
% extern void MLReleaseIntegerArray ( MLINK mlp , int * data , long * dims , char ** heads , long depth ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrvoidPtrlongThunk';fcns.name{fcnNum}='MLReleaseIntegerArray'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'MLinkPtr', 'int32Ptr', 'longPtr', 'stringPtrPtr', 'long'};fcnNum=fcnNum+1;
% extern void MLReleaseLongIntegerArray ( MLINK mlp , long * data , long * dims , char ** heads , long depth ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrvoidPtrlongThunk';fcns.name{fcnNum}='MLReleaseLongIntegerArray'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'MLinkPtr', 'longPtr', 'longPtr', 'stringPtrPtr', 'long'};fcnNum=fcnNum+1;
% extern void MLReleaseBinaryNumberArray ( MLINK mlp , void * data , int * dimp , char ** heads , int len , long type ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrvoidPtrint32longThunk';fcns.name{fcnNum}='MLReleaseBinaryNumberArray'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'MLinkPtr', 'voidPtr', 'int32Ptr', 'stringPtrPtr', 'int32', 'long'};fcnNum=fcnNum+1;
% extern void MLReleaseByteArray ( MLINK mlp , unsigned char * data , int * dims , char ** heads , int depth ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='MLReleaseByteArray'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'MLinkPtr', 'uint8Ptr', 'int32Ptr', 'stringPtrPtr', 'int32'};fcnNum=fcnNum+1;
% extern void MLReleaseInteger16Array ( MLINK mlp , short * data , int * dims , char ** heads , int depth ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='MLReleaseInteger16Array'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'MLinkPtr', 'int16Ptr', 'int32Ptr', 'stringPtrPtr', 'int32'};fcnNum=fcnNum+1;
% extern void MLReleaseInteger32Array ( MLINK mlp , int * data , int * dims , char ** heads , int depth ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='MLReleaseInteger32Array'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'MLinkPtr', 'int32Ptr', 'int32Ptr', 'stringPtrPtr', 'int32'};fcnNum=fcnNum+1;
% extern void MLReleaseInteger64Array ( MLINK mlp , mlint64 * data , int * dims , char ** heads , int depth ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='MLReleaseInteger64Array'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'MLinkPtr', 'int64Ptr', 'int32Ptr', 'stringPtrPtr', 'int32'};fcnNum=fcnNum+1;
% extern void MLReleaseInteger8Array ( MLINK mlp , unsigned char * data , int * dimp , char ** heads , int depth ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='MLReleaseInteger8Array'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'MLinkPtr', 'uint8Ptr', 'int32Ptr', 'stringPtrPtr', 'int32'};fcnNum=fcnNum+1;
% extern void MLReleaseFloatArray ( MLINK mlp , float * data , long * dims , char ** heads , long depth ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrvoidPtrlongThunk';fcns.name{fcnNum}='MLReleaseFloatArray'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'MLinkPtr', 'singlePtr', 'longPtr', 'stringPtrPtr', 'long'};fcnNum=fcnNum+1;
% extern void MLReleaseDoubleArray ( MLINK mlp , double * data , long * dims , char ** heads , long depth ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrvoidPtrlongThunk';fcns.name{fcnNum}='MLReleaseDoubleArray'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'MLinkPtr', 'doublePtr', 'longPtr', 'stringPtrPtr', 'long'};fcnNum=fcnNum+1;
% extern void MLReleaseRealArray ( MLINK mlp , double * data , long * dims , char ** heads , long depth ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrvoidPtrlongThunk';fcns.name{fcnNum}='MLReleaseRealArray'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'MLinkPtr', 'doublePtr', 'longPtr', 'stringPtrPtr', 'long'};fcnNum=fcnNum+1;
% extern void MLReleaseReal32Array ( MLINK mlp , float * data , int * dims , char ** heads , int depth ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='MLReleaseReal32Array'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'MLinkPtr', 'singlePtr', 'int32Ptr', 'stringPtrPtr', 'int32'};fcnNum=fcnNum+1;
% extern void MLReleaseReal64Array ( MLINK mlp , double * data , int * dims , char ** heads , int depth ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='MLReleaseReal64Array'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'MLinkPtr', 'doublePtr', 'int32Ptr', 'int64Ptr', 'int32'};fcnNum=fcnNum+1;
% extern void MLReleaseReal128Array ( MLINK mlp , mlextended_double * data , int * dims , char ** heads , int depth ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='MLReleaseReal128Array'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'MLinkPtr', 'errorPtr', 'int32Ptr', 'stringPtrPtr', 'int32'};fcnNum=fcnNum+1;
% extern void MLReleaseLongDoubleArray ( MLINK mlp , mlextended_double * data , long * dims , char ** heads , long depth ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrvoidPtrlongThunk';fcns.name{fcnNum}='MLReleaseLongDoubleArray'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'MLinkPtr', 'errorPtr', 'longPtr', 'stringPtrPtr', 'long'};fcnNum=fcnNum+1;
% extern MLUnicodeContainer * MLNewUnicodeContainer ( const void * string , int length , enum MLUnicodeContainerType type ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrint32enumMLUnicodeContainerTypeThunk';fcns.name{fcnNum}='MLNewUnicodeContainer'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'voidPtr', 'int32', 'MLUnicodeContainerType'};fcnNum=fcnNum+1;
% extern void MLReleaseUnicodeContainer ( MLUnicodeContainer * string ); 
fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='MLReleaseUnicodeContainer'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% extern MLINKMark MLCreateMark ( MLINK mlp ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrThunk';fcns.name{fcnNum}='MLCreateMark'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='MLinkMarkPtr'; fcns.RHS{fcnNum}={'MLinkPtr'};fcnNum=fcnNum+1;
% extern MLINKMark MLSeekToMark ( MLINK mlp , MLINKMark mark , int index ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='MLSeekToMark'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='MLinkMarkPtr'; fcns.RHS{fcnNum}={'MLinkPtr', 'MLinkMarkPtr', 'int32'};fcnNum=fcnNum+1;
% extern MLINKMark MLSeekMark ( MLINK mlp , MLINKMark mark , int index ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='MLSeekMark'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='MLinkMarkPtr'; fcns.RHS{fcnNum}={'MLinkPtr', 'MLinkMarkPtr', 'int32'};fcnNum=fcnNum+1;
% extern void MLDestroyMark ( MLINK mlp , MLINKMark mark ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrThunk';fcns.name{fcnNum}='MLDestroyMark'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'MLinkPtr', 'MLinkMarkPtr'};fcnNum=fcnNum+1;
% extern int MLTransferExpression ( MLINK dmlp , MLINK smlp ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='MLTransferExpression'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'MLinkPtr'};fcnNum=fcnNum+1;
% extern int MLTransferToEndOfLoopbackLink ( MLINK dmlp , MLINK smlp ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='MLTransferToEndOfLoopbackLink'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'MLinkPtr'};fcnNum=fcnNum+1;
% extern int MLForwardReset ( MLINK mlp , unsigned long marker ); 
fcns.thunkname{fcnNum}='int32voidPtrulongThunk';fcns.name{fcnNum}='MLForwardReset'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'ulong'};fcnNum=fcnNum+1;
% extern int MLAlign ( MLINK lmlp , MLINK rmlp ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='MLAlign'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr', 'MLinkPtr'};fcnNum=fcnNum+1;
% extern int MLNextPacket ( MLINK mlp ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='MLNextPacket'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr'};fcnNum=fcnNum+1;
% extern mldlg_result MLAlert ( MLEnvironment env , const char * message ); 
fcns.thunkname{fcnNum}='int64voidPtrcstringThunk';fcns.name{fcnNum}='MLAlert'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int64'; fcns.RHS{fcnNum}={'ml_environmentPtr', 'cstring'};fcnNum=fcnNum+1;
% extern mldlg_result MLRequest ( MLEnvironment env , const char * prompt , char * response , long sizeof_response ); 
fcns.thunkname{fcnNum}='int64voidPtrcstringcstringlongThunk';fcns.name{fcnNum}='MLRequest'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int64'; fcns.RHS{fcnNum}={'ml_environmentPtr', 'cstring', 'cstring', 'long'};fcnNum=fcnNum+1;
% extern mldlg_result MLConfirm ( MLEnvironment env , const char * question , mldlg_result default_answer ); 
fcns.thunkname{fcnNum}='int64voidPtrcstringint64Thunk';fcns.name{fcnNum}='MLConfirm'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int64'; fcns.RHS{fcnNum}={'ml_environmentPtr', 'cstring', 'int64'};fcnNum=fcnNum+1;
% extern mldlg_result MLRequestArgv ( MLEnvironment env , char ** argv , long cardof_argv , char * buff , long size ); 
fcns.thunkname{fcnNum}='int64voidPtrvoidPtrlongcstringlongThunk';fcns.name{fcnNum}='MLRequestArgv'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int64'; fcns.RHS{fcnNum}={'ml_environmentPtr', 'stringPtrPtr', 'long', 'cstring', 'long'};fcnNum=fcnNum+1;
% extern mldlg_result MLRequestToInteract ( MLEnvironment env , mldlg_result wait_for_permission ); 
fcns.thunkname{fcnNum}='int64voidPtrint64Thunk';fcns.name{fcnNum}='MLRequestToInteract'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int64'; fcns.RHS{fcnNum}={'ml_environmentPtr', 'int64'};fcnNum=fcnNum+1;
% extern int MLSetDialogFunction ( MLEnvironment env , long funcnum , MLDialogFunctionType func ); 
fcns.thunkname{fcnNum}='int32voidPtrlongvoidPtrThunk';fcns.name{fcnNum}='MLSetDialogFunction'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ml_environmentPtr', 'long', 'FcnPtr'};fcnNum=fcnNum+1;
% extern MLDialogProcPtr MLAlertCast ( MLAlertProcPtr f ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrThunk';fcns.name{fcnNum}='MLAlertCast'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='FcnPtr'; fcns.RHS{fcnNum}={'FcnPtr'};fcnNum=fcnNum+1;
% extern MLDialogProcPtr MLRequestCast ( MLRequestProcPtr f ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrThunk';fcns.name{fcnNum}='MLRequestCast'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='FcnPtr'; fcns.RHS{fcnNum}={'FcnPtr'};fcnNum=fcnNum+1;
% extern MLDialogProcPtr MLConfirmCast ( MLConfirmProcPtr f ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrThunk';fcns.name{fcnNum}='MLConfirmCast'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='FcnPtr'; fcns.RHS{fcnNum}={'FcnPtr'};fcnNum=fcnNum+1;
% extern MLDialogProcPtr MLRequestArgvCast ( MLRequestArgvProcPtr f ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrThunk';fcns.name{fcnNum}='MLRequestArgvCast'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='FcnPtr'; fcns.RHS{fcnNum}={'FcnPtr'};fcnNum=fcnNum+1;
% extern MLDialogProcPtr MLRequestToInteractCast ( MLRequestToInteractProcPtr f ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrThunk';fcns.name{fcnNum}='MLRequestToInteractCast'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='FcnPtr'; fcns.RHS{fcnNum}={'FcnPtr'};fcnNum=fcnNum+1;
% extern int MLReady ( MLINK mlp ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='MLReady'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr'};fcnNum=fcnNum+1;
% extern int MLReadyParallel ( MLENV , MLINK *, int , mltimeval ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrint32mltimevalThunk';fcns.name{fcnNum}='MLReadyParallel'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ml_environmentPtr', 'MLinkPtrPtr', 'int32', 's_mltimeval'};fcnNum=fcnNum+1;
% extern int MLWaitForLinkActivity ( MLINK mlp ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='MLWaitForLinkActivity'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'MLinkPtr'};fcnNum=fcnNum+1;
structs.HWND__.members=struct('unused', 'int32');
structs.HINSTANCE__.members=struct('unused', 'int32');
structs.s_wint.members=struct('low', 'uint32', 'hi', 'uint32');
structs.ml_environment.members=struct('');
structs.MLink.members=struct('');
structs.MLinkMark.members=struct('');
structs.read_buf.members=struct('length', 'uint16', 'ptr', 'uint8Ptr');
structs.MLYieldParams.members=struct('');
structs.feature_set.members=struct('');
structs.MLStringPosition.members=struct('str', 'cstring', 'end', 'cstring');
structs.MLOldStringPosition.members=struct('cc', 'uint8Ptr', 'mode', 'int32', 'more', 'int32', 'head', 'uint8Ptr');
structs.array_meter.members=struct('');
structs.s_mltimeval.members=struct('tv_sec', 'ulong', 'tv_usec', 'ulong');
enuminfo.MLUnicodeContainerType=struct('UCS2ContainerType',0,'UTF8ContainerType',1,'UTF16ContainerType',2,'UTF32ContainerType',3);
enuminfo.MLTK=struct('MLTKERR',0,'MLTKSTR',34,'MLTKSYM',35,'MLTKREAL',42,'MLTKINT',43,'MLTKFUNC',70);
enuminfo.PKT=struct('ILLEGALPKT',0,'CALLPKT',7,'EVALUATEPKT',13,'RETURNPKT',3,'INPUTNAMEPKT',8,'ENTERTEXTPKT',14,'ENTEREXPRPKT',15,'OUTPUTNAMEPKT',9,'RETURNTEXTPKT',4,'RETURNEXPRPKT',16,'DISPLAYPKT',11,'DISPLAYENDPKT',12,'MESSAGEPKT',5,'TEXTPKT',2,'INPUTPKT',1,'INPUTSTRPKT',21,'MENUPKT',6,'SYNTAXPKT',10,'SUSPENDPKT',17,'RESUMEPKT',18,'BEGINDLGPKT',19,'ENDDLGPKT',20,'FIRSTUSERPKT',128,'LASTUSERPKT',255);
methodinfo=fcns;